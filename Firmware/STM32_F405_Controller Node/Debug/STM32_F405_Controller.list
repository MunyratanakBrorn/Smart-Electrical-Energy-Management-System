
STM32_F405_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ba0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004d28  08004d28  00005d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d40  08004d40  0000601c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d40  08004d40  00005d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d48  08004d48  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d48  08004d48  00005d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d4c  08004d4c  00005d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004d50  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000601c  2**0
                  CONTENTS
 10 .bss          00000628  2000001c  2000001c  0000601c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000644  20000644  0000601c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000112f2  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027cf  00000000  00000000  0001733e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  00019b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c39  00000000  00000000  0001aac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002081f  00000000  00000000  0001b6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013bc9  00000000  00000000  0003bf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3eb6  00000000  00000000  0004fae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00113997  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004220  00000000  00000000  001139dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00117bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004d10 	.word	0x08004d10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08004d10 	.word	0x08004d10

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	@ 0x28
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ce:	2300      	movs	r3, #0
 80004d0:	613b      	str	r3, [r7, #16]
 80004d2:	4b56      	ldr	r3, [pc, #344]	@ (800062c <MX_GPIO_Init+0x174>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d6:	4a55      	ldr	r2, [pc, #340]	@ (800062c <MX_GPIO_Init+0x174>)
 80004d8:	f043 0304 	orr.w	r3, r3, #4
 80004dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004de:	4b53      	ldr	r3, [pc, #332]	@ (800062c <MX_GPIO_Init+0x174>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	f003 0304 	and.w	r3, r3, #4
 80004e6:	613b      	str	r3, [r7, #16]
 80004e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	4b4f      	ldr	r3, [pc, #316]	@ (800062c <MX_GPIO_Init+0x174>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	4a4e      	ldr	r2, [pc, #312]	@ (800062c <MX_GPIO_Init+0x174>)
 80004f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004fa:	4b4c      	ldr	r3, [pc, #304]	@ (800062c <MX_GPIO_Init+0x174>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	4b48      	ldr	r3, [pc, #288]	@ (800062c <MX_GPIO_Init+0x174>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	4a47      	ldr	r2, [pc, #284]	@ (800062c <MX_GPIO_Init+0x174>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6313      	str	r3, [r2, #48]	@ 0x30
 8000516:	4b45      	ldr	r3, [pc, #276]	@ (800062c <MX_GPIO_Init+0x174>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	4b41      	ldr	r3, [pc, #260]	@ (800062c <MX_GPIO_Init+0x174>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a40      	ldr	r2, [pc, #256]	@ (800062c <MX_GPIO_Init+0x174>)
 800052c:	f043 0302 	orr.w	r3, r3, #2
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
 8000532:	4b3e      	ldr	r3, [pc, #248]	@ (800062c <MX_GPIO_Init+0x174>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	f003 0302 	and.w	r3, r3, #2
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CON_CoilRL_Pin|GPIO_PIN_0|RL4_Pin|RL3_Pin
 800053e:	2200      	movs	r2, #0
 8000540:	f242 31c1 	movw	r1, #9153	@ 0x23c1
 8000544:	483a      	ldr	r0, [pc, #232]	@ (8000630 <MX_GPIO_Init+0x178>)
 8000546:	f002 f881 	bl	800264c <HAL_GPIO_WritePin>
                          |RL2_Pin|RL1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|RL5_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000550:	4838      	ldr	r0, [pc, #224]	@ (8000634 <MX_GPIO_Init+0x17c>)
 8000552:	f002 f87b 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRI2_Pin|TRI1_Pin|LED_A_Pin|LED_B_Pin
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 800055c:	4836      	ldr	r0, [pc, #216]	@ (8000638 <MX_GPIO_Init+0x180>)
 800055e:	f002 f875 	bl	800264c <HAL_GPIO_WritePin>
                          |LED_C_Pin|LED_D_Pin|Zero_Cross2_Pin|Zero_Cross1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PC0 PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = CON_CoilRL_Pin|GPIO_PIN_0|RL4_Pin|RL3_Pin
 8000562:	f242 33c1 	movw	r3, #9153	@ 0x23c1
 8000566:	617b      	str	r3, [r7, #20]
                          |RL2_Pin|RL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	2301      	movs	r3, #1
 800056a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	4619      	mov	r1, r3
 800057a:	482d      	ldr	r0, [pc, #180]	@ (8000630 <MX_GPIO_Init+0x178>)
 800057c:	f001 feca 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|RL5_Pin;
 8000580:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2301      	movs	r3, #1
 8000588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058e:	2300      	movs	r3, #0
 8000590:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	4826      	ldr	r0, [pc, #152]	@ (8000634 <MX_GPIO_Init+0x17c>)
 800059a:	f001 febb 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TRI2_Pin|TRI1_Pin|LED_A_Pin|LED_B_Pin
 800059e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80005a2:	617b      	str	r3, [r7, #20]
                          |LED_C_Pin|LED_D_Pin|Zero_Cross2_Pin|Zero_Cross1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	4820      	ldr	r0, [pc, #128]	@ (8000638 <MX_GPIO_Init+0x180>)
 80005b8:	f001 feac 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005bc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4619      	mov	r1, r3
 80005d2:	4817      	ldr	r0, [pc, #92]	@ (8000630 <MX_GPIO_Init+0x178>)
 80005d4:	f001 fe9e 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80005d8:	2318      	movs	r3, #24
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	4812      	ldr	r0, [pc, #72]	@ (8000638 <MX_GPIO_Init+0x180>)
 80005ee:	f001 fe91 	bl	8002314 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2009      	movs	r0, #9
 80005f8:	f001 fdc3 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80005fc:	2009      	movs	r0, #9
 80005fe:	f001 fddc 	bl	80021ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	200a      	movs	r0, #10
 8000608:	f001 fdbb 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800060c:	200a      	movs	r0, #10
 800060e:	f001 fdd4 	bl	80021ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	2028      	movs	r0, #40	@ 0x28
 8000618:	f001 fdb3 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800061c:	2028      	movs	r0, #40	@ 0x28
 800061e:	f001 fdcc 	bl	80021ba <HAL_NVIC_EnableIRQ>

}
 8000622:	bf00      	nop
 8000624:	3728      	adds	r7, #40	@ 0x28
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40020800 	.word	0x40020800
 8000634:	40020000 	.word	0x40020000
 8000638:	40020400 	.word	0x40020400

0800063c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

	if (huart->Instance == UART4)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a07      	ldr	r2, [pc, #28]	@ (8000668 <HAL_UART_RxCpltCallback+0x2c>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d107      	bne.n	800065e <HAL_UART_RxCpltCallback+0x22>
  {
    relay_flag = 1;  // Set flag to indicate data received
 800064e:	4b07      	ldr	r3, [pc, #28]	@ (800066c <HAL_UART_RxCpltCallback+0x30>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart4, (uint8_t*)&rx_relay, 1); // receive next character
 8000654:	2201      	movs	r2, #1
 8000656:	4906      	ldr	r1, [pc, #24]	@ (8000670 <HAL_UART_RxCpltCallback+0x34>)
 8000658:	4806      	ldr	r0, [pc, #24]	@ (8000674 <HAL_UART_RxCpltCallback+0x38>)
 800065a:	f003 f98d 	bl	8003978 <HAL_UART_Receive_IT>

  }
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40004c00 	.word	0x40004c00
 800066c:	2000013c 	.word	0x2000013c
 8000670:	2000013e 	.word	0x2000013e
 8000674:	20000188 	.word	0x20000188

08000678 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	80fb      	strh	r3, [r7, #6]
    relay_flag1 = 1;  // Set the flag to indicate a button press
 8000682:	4b04      	ldr	r3, [pc, #16]	@ (8000694 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000684:	2201      	movs	r2, #1
 8000686:	701a      	strb	r2, [r3, #0]
//       }
//       if (GPIO_Pin == GPIO_PIN_12)  // Button 5
//       {
//           mode5 = !mode5;  // Toggle mode5 between 1 and 0
//       }
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	2000013d 	.word	0x2000013d

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069e:	f001 fbff 	bl	8001ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a2:	f000 fa4f 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a6:	f7ff ff07 	bl	80004b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80006aa:	f001 f9bd 	bl	8001a28 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80006ae:	f001 fa51 	bl	8001b54 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_HCD_Init();
 80006b2:	f001 fb5d 	bl	8001d70 <MX_USB_OTG_FS_HCD_Init>
  MX_UART4_Init();
 80006b6:	f001 fa23 	bl	8001b00 <MX_UART4_Init>
  MX_USART2_UART_Init();
 80006ba:	f001 fa75 	bl	8001ba8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BL0910_Init();
 80006be:	f000 fb51 	bl	8000d64 <BL0910_Init>
  uint32_t loop_timer = HAL_GetTick();//Timer counter
 80006c2:	f001 fc53 	bl	8001f6c <HAL_GetTick>
 80006c6:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart4, (uint8_t*)&rx_relay, 1); // start receiving
 80006c8:	2201      	movs	r2, #1
 80006ca:	49be      	ldr	r1, [pc, #760]	@ (80009c4 <main+0x32c>)
 80006cc:	48be      	ldr	r0, [pc, #760]	@ (80009c8 <main+0x330>)
 80006ce:	f003 f953 	bl	8003978 <HAL_UART_Receive_IT>
  HAL_Delay(50);
 80006d2:	2032      	movs	r0, #50	@ 0x32
 80006d4:	f001 fc56 	bl	8001f84 <HAL_Delay>
  HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006de:	48bb      	ldr	r0, [pc, #748]	@ (80009cc <main+0x334>)
 80006e0:	f001 ffb4 	bl	800264c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRI1_GPIO_Port, TRI1_Pin, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006ea:	48b9      	ldr	r0, [pc, #740]	@ (80009d0 <main+0x338>)
 80006ec:	f001 ffae 	bl	800264c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRI2_GPIO_Port, TRI2_Pin, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006f6:	48b6      	ldr	r0, [pc, #728]	@ (80009d0 <main+0x338>)
 80006f8:	f001 ffa8 	bl	800264c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ( HAL_GetTick() - loop_timer > 2000 ){
 80006fc:	f001 fc36 	bl	8001f6c <HAL_GetTick>
 8000700:	4602      	mov	r2, r0
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800070a:	f240 81ee 	bls.w	8000aea <main+0x452>
	 	  loop_timer = HAL_GetTick();
 800070e:	f001 fc2d 	bl	8001f6c <HAL_GetTick>
 8000712:	6078      	str	r0, [r7, #4]
	 	   BL0910_Elect_Proc();
 8000714:	f000 fb88 	bl	8000e28 <BL0910_Elect_Proc>

			vol = BL0910_Elect.RMS_V * fv; //Voltage (V) Volt
 8000718:	4bae      	ldr	r3, [pc, #696]	@ (80009d4 <main+0x33c>)
 800071a:	8a9b      	ldrh	r3, [r3, #20]
 800071c:	ee07 3a90 	vmov	s15, r3
 8000720:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000724:	4bac      	ldr	r3, [pc, #688]	@ (80009d8 <main+0x340>)
 8000726:	edd3 7a00 	vldr	s15, [r3]
 800072a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800072e:	4bab      	ldr	r3, [pc, #684]	@ (80009dc <main+0x344>)
 8000730:	edc3 7a00 	vstr	s15, [r3]
			freq = BL0910_Elect.Period * ff; //Frequency Hz (Hertz)
 8000734:	4ba7      	ldr	r3, [pc, #668]	@ (80009d4 <main+0x33c>)
 8000736:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800073a:	ee07 3a90 	vmov	s15, r3
 800073e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000742:	4ba7      	ldr	r3, [pc, #668]	@ (80009e0 <main+0x348>)
 8000744:	edd3 7a00 	vldr	s15, [r3]
 8000748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800074c:	4ba5      	ldr	r3, [pc, #660]	@ (80009e4 <main+0x34c>)
 800074e:	edc3 7a00 	vstr	s15, [r3]

			I1 = BL0910_Elect.RMS_1 * fi; //Current 1 (A) Ampere
 8000752:	4ba0      	ldr	r3, [pc, #640]	@ (80009d4 <main+0x33c>)
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	ee07 3a90 	vmov	s15, r3
 800075a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800075e:	4ba2      	ldr	r3, [pc, #648]	@ (80009e8 <main+0x350>)
 8000760:	edd3 7a00 	vldr	s15, [r3]
 8000764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000768:	4ba0      	ldr	r3, [pc, #640]	@ (80009ec <main+0x354>)
 800076a:	edc3 7a00 	vstr	s15, [r3]
			I2 = BL0910_Elect.RMS_2 * fi;
 800076e:	4b99      	ldr	r3, [pc, #612]	@ (80009d4 <main+0x33c>)
 8000770:	885b      	ldrh	r3, [r3, #2]
 8000772:	ee07 3a90 	vmov	s15, r3
 8000776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800077a:	4b9b      	ldr	r3, [pc, #620]	@ (80009e8 <main+0x350>)
 800077c:	edd3 7a00 	vldr	s15, [r3]
 8000780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000784:	4b9a      	ldr	r3, [pc, #616]	@ (80009f0 <main+0x358>)
 8000786:	edc3 7a00 	vstr	s15, [r3]
			I3 = BL0910_Elect.RMS_3 * fi;
 800078a:	4b92      	ldr	r3, [pc, #584]	@ (80009d4 <main+0x33c>)
 800078c:	889b      	ldrh	r3, [r3, #4]
 800078e:	ee07 3a90 	vmov	s15, r3
 8000792:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000796:	4b94      	ldr	r3, [pc, #592]	@ (80009e8 <main+0x350>)
 8000798:	edd3 7a00 	vldr	s15, [r3]
 800079c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007a0:	4b94      	ldr	r3, [pc, #592]	@ (80009f4 <main+0x35c>)
 80007a2:	edc3 7a00 	vstr	s15, [r3]
			I4 = BL0910_Elect.RMS_4 * fi;
 80007a6:	4b8b      	ldr	r3, [pc, #556]	@ (80009d4 <main+0x33c>)
 80007a8:	88db      	ldrh	r3, [r3, #6]
 80007aa:	ee07 3a90 	vmov	s15, r3
 80007ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007b2:	4b8d      	ldr	r3, [pc, #564]	@ (80009e8 <main+0x350>)
 80007b4:	edd3 7a00 	vldr	s15, [r3]
 80007b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007bc:	4b8e      	ldr	r3, [pc, #568]	@ (80009f8 <main+0x360>)
 80007be:	edc3 7a00 	vstr	s15, [r3]
			I5 = BL0910_Elect.RMS_5 * fi;
 80007c2:	4b84      	ldr	r3, [pc, #528]	@ (80009d4 <main+0x33c>)
 80007c4:	891b      	ldrh	r3, [r3, #8]
 80007c6:	ee07 3a90 	vmov	s15, r3
 80007ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007ce:	4b86      	ldr	r3, [pc, #536]	@ (80009e8 <main+0x350>)
 80007d0:	edd3 7a00 	vldr	s15, [r3]
 80007d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007d8:	4b88      	ldr	r3, [pc, #544]	@ (80009fc <main+0x364>)
 80007da:	edc3 7a00 	vstr	s15, [r3]
			I6 = BL0910_Elect.RMS_6 * fi;
 80007de:	4b7d      	ldr	r3, [pc, #500]	@ (80009d4 <main+0x33c>)
 80007e0:	895b      	ldrh	r3, [r3, #10]
 80007e2:	ee07 3a90 	vmov	s15, r3
 80007e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007ea:	4b7f      	ldr	r3, [pc, #508]	@ (80009e8 <main+0x350>)
 80007ec:	edd3 7a00 	vldr	s15, [r3]
 80007f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007f4:	4b82      	ldr	r3, [pc, #520]	@ (8000a00 <main+0x368>)
 80007f6:	edc3 7a00 	vstr	s15, [r3]
			//I6 = 1.0245;
			I7 = BL0910_Elect.RMS_7 * fi;
 80007fa:	4b76      	ldr	r3, [pc, #472]	@ (80009d4 <main+0x33c>)
 80007fc:	899b      	ldrh	r3, [r3, #12]
 80007fe:	ee07 3a90 	vmov	s15, r3
 8000802:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000806:	4b78      	ldr	r3, [pc, #480]	@ (80009e8 <main+0x350>)
 8000808:	edd3 7a00 	vldr	s15, [r3]
 800080c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000810:	4b7c      	ldr	r3, [pc, #496]	@ (8000a04 <main+0x36c>)
 8000812:	edc3 7a00 	vstr	s15, [r3]
			I8 = BL0910_Elect.RMS_8 * fi;
 8000816:	4b6f      	ldr	r3, [pc, #444]	@ (80009d4 <main+0x33c>)
 8000818:	89db      	ldrh	r3, [r3, #14]
 800081a:	ee07 3a90 	vmov	s15, r3
 800081e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000822:	4b71      	ldr	r3, [pc, #452]	@ (80009e8 <main+0x350>)
 8000824:	edd3 7a00 	vldr	s15, [r3]
 8000828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800082c:	4b76      	ldr	r3, [pc, #472]	@ (8000a08 <main+0x370>)
 800082e:	edc3 7a00 	vstr	s15, [r3]
			I9 = BL0910_Elect.RMS_9 * fi;
 8000832:	4b68      	ldr	r3, [pc, #416]	@ (80009d4 <main+0x33c>)
 8000834:	8a1b      	ldrh	r3, [r3, #16]
 8000836:	ee07 3a90 	vmov	s15, r3
 800083a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800083e:	4b6a      	ldr	r3, [pc, #424]	@ (80009e8 <main+0x350>)
 8000840:	edd3 7a00 	vldr	s15, [r3]
 8000844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000848:	4b70      	ldr	r3, [pc, #448]	@ (8000a0c <main+0x374>)
 800084a:	edc3 7a00 	vstr	s15, [r3]
			I10 = BL0910_Elect.RMS_10 * fi;
 800084e:	4b61      	ldr	r3, [pc, #388]	@ (80009d4 <main+0x33c>)
 8000850:	8a5b      	ldrh	r3, [r3, #18]
 8000852:	ee07 3a90 	vmov	s15, r3
 8000856:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800085a:	4b63      	ldr	r3, [pc, #396]	@ (80009e8 <main+0x350>)
 800085c:	edd3 7a00 	vldr	s15, [r3]
 8000860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000864:	4b6a      	ldr	r3, [pc, #424]	@ (8000a10 <main+0x378>)
 8000866:	edc3 7a00 	vstr	s15, [r3]
			P1 = BL0910_Elect.WATT_1 * fp; //Active Power1 W (Watt)
 800086a:	4b5a      	ldr	r3, [pc, #360]	@ (80009d4 <main+0x33c>)
 800086c:	8adb      	ldrh	r3, [r3, #22]
 800086e:	ee07 3a90 	vmov	s15, r3
 8000872:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000876:	4b67      	ldr	r3, [pc, #412]	@ (8000a14 <main+0x37c>)
 8000878:	edd3 7a00 	vldr	s15, [r3]
 800087c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000880:	4b65      	ldr	r3, [pc, #404]	@ (8000a18 <main+0x380>)
 8000882:	edc3 7a00 	vstr	s15, [r3]
			P2 = BL0910_Elect.WATT_2 * fp;
 8000886:	4b53      	ldr	r3, [pc, #332]	@ (80009d4 <main+0x33c>)
 8000888:	8b1b      	ldrh	r3, [r3, #24]
 800088a:	ee07 3a90 	vmov	s15, r3
 800088e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000892:	4b60      	ldr	r3, [pc, #384]	@ (8000a14 <main+0x37c>)
 8000894:	edd3 7a00 	vldr	s15, [r3]
 8000898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800089c:	4b5f      	ldr	r3, [pc, #380]	@ (8000a1c <main+0x384>)
 800089e:	edc3 7a00 	vstr	s15, [r3]
			P3 = BL0910_Elect.WATT_3 * fp;
 80008a2:	4b4c      	ldr	r3, [pc, #304]	@ (80009d4 <main+0x33c>)
 80008a4:	8b5b      	ldrh	r3, [r3, #26]
 80008a6:	ee07 3a90 	vmov	s15, r3
 80008aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008ae:	4b59      	ldr	r3, [pc, #356]	@ (8000a14 <main+0x37c>)
 80008b0:	edd3 7a00 	vldr	s15, [r3]
 80008b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008b8:	4b59      	ldr	r3, [pc, #356]	@ (8000a20 <main+0x388>)
 80008ba:	edc3 7a00 	vstr	s15, [r3]
			P4 = BL0910_Elect.WATT_4 * fp;
 80008be:	4b45      	ldr	r3, [pc, #276]	@ (80009d4 <main+0x33c>)
 80008c0:	8b9b      	ldrh	r3, [r3, #28]
 80008c2:	ee07 3a90 	vmov	s15, r3
 80008c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008ca:	4b52      	ldr	r3, [pc, #328]	@ (8000a14 <main+0x37c>)
 80008cc:	edd3 7a00 	vldr	s15, [r3]
 80008d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008d4:	4b53      	ldr	r3, [pc, #332]	@ (8000a24 <main+0x38c>)
 80008d6:	edc3 7a00 	vstr	s15, [r3]
			P5 = BL0910_Elect.WATT_5 * fp;
 80008da:	4b3e      	ldr	r3, [pc, #248]	@ (80009d4 <main+0x33c>)
 80008dc:	8bdb      	ldrh	r3, [r3, #30]
 80008de:	ee07 3a90 	vmov	s15, r3
 80008e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008e6:	4b4b      	ldr	r3, [pc, #300]	@ (8000a14 <main+0x37c>)
 80008e8:	edd3 7a00 	vldr	s15, [r3]
 80008ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008f0:	4b4d      	ldr	r3, [pc, #308]	@ (8000a28 <main+0x390>)
 80008f2:	edc3 7a00 	vstr	s15, [r3]
			P6 = BL0910_Elect.WATT_6 * fp;
 80008f6:	4b37      	ldr	r3, [pc, #220]	@ (80009d4 <main+0x33c>)
 80008f8:	8c1b      	ldrh	r3, [r3, #32]
 80008fa:	ee07 3a90 	vmov	s15, r3
 80008fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000902:	4b44      	ldr	r3, [pc, #272]	@ (8000a14 <main+0x37c>)
 8000904:	edd3 7a00 	vldr	s15, [r3]
 8000908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800090c:	4b47      	ldr	r3, [pc, #284]	@ (8000a2c <main+0x394>)
 800090e:	edc3 7a00 	vstr	s15, [r3]
			P7 = BL0910_Elect.WATT_7 * fp;
 8000912:	4b30      	ldr	r3, [pc, #192]	@ (80009d4 <main+0x33c>)
 8000914:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000916:	ee07 3a90 	vmov	s15, r3
 800091a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800091e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a14 <main+0x37c>)
 8000920:	edd3 7a00 	vldr	s15, [r3]
 8000924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000928:	4b41      	ldr	r3, [pc, #260]	@ (8000a30 <main+0x398>)
 800092a:	edc3 7a00 	vstr	s15, [r3]
			P8 = BL0910_Elect.WATT_8 * fp;
 800092e:	4b29      	ldr	r3, [pc, #164]	@ (80009d4 <main+0x33c>)
 8000930:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000932:	ee07 3a90 	vmov	s15, r3
 8000936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800093a:	4b36      	ldr	r3, [pc, #216]	@ (8000a14 <main+0x37c>)
 800093c:	edd3 7a00 	vldr	s15, [r3]
 8000940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000944:	4b3b      	ldr	r3, [pc, #236]	@ (8000a34 <main+0x39c>)
 8000946:	edc3 7a00 	vstr	s15, [r3]
			P9 = BL0910_Elect.WATT_9 * fp;
 800094a:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <main+0x33c>)
 800094c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800094e:	ee07 3a90 	vmov	s15, r3
 8000952:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000956:	4b2f      	ldr	r3, [pc, #188]	@ (8000a14 <main+0x37c>)
 8000958:	edd3 7a00 	vldr	s15, [r3]
 800095c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000960:	4b35      	ldr	r3, [pc, #212]	@ (8000a38 <main+0x3a0>)
 8000962:	edc3 7a00 	vstr	s15, [r3]
			P10 = BL0910_Elect.WATT_10 * fp;
 8000966:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <main+0x33c>)
 8000968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800096a:	ee07 3a90 	vmov	s15, r3
 800096e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000972:	4b28      	ldr	r3, [pc, #160]	@ (8000a14 <main+0x37c>)
 8000974:	edd3 7a00 	vldr	s15, [r3]
 8000978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800097c:	4b2f      	ldr	r3, [pc, #188]	@ (8000a3c <main+0x3a4>)
 800097e:	edc3 7a00 	vstr	s15, [r3]
//			P7 = vol* I7;
//			P8 = vol* I8;
//			P9 = vol* I9;
//			P10 = vol* I10;

			BL0910_package.Current1 = I6;
 8000982:	4b1f      	ldr	r3, [pc, #124]	@ (8000a00 <main+0x368>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a2e      	ldr	r2, [pc, #184]	@ (8000a40 <main+0x3a8>)
 8000988:	6013      	str	r3, [r2, #0]
			BL0910_package.Current2 = I7;
 800098a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <main+0x36c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a2c      	ldr	r2, [pc, #176]	@ (8000a40 <main+0x3a8>)
 8000990:	6053      	str	r3, [r2, #4]
			BL0910_package.Current3 = I8;
 8000992:	4b1d      	ldr	r3, [pc, #116]	@ (8000a08 <main+0x370>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a2a      	ldr	r2, [pc, #168]	@ (8000a40 <main+0x3a8>)
 8000998:	6093      	str	r3, [r2, #8]
			BL0910_package.Current4 = I9;
 800099a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <main+0x374>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a28      	ldr	r2, [pc, #160]	@ (8000a40 <main+0x3a8>)
 80009a0:	60d3      	str	r3, [r2, #12]
			BL0910_package.Current5 = I10;
 80009a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <main+0x378>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a26      	ldr	r2, [pc, #152]	@ (8000a40 <main+0x3a8>)
 80009a8:	6113      	str	r3, [r2, #16]

			BL0910_package.AP1 = P6;
 80009aa:	4b20      	ldr	r3, [pc, #128]	@ (8000a2c <main+0x394>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a24      	ldr	r2, [pc, #144]	@ (8000a40 <main+0x3a8>)
 80009b0:	6153      	str	r3, [r2, #20]
			BL0910_package.AP2 = P7;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a30 <main+0x398>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a22      	ldr	r2, [pc, #136]	@ (8000a40 <main+0x3a8>)
 80009b8:	6193      	str	r3, [r2, #24]
			BL0910_package.AP3 = P8;
 80009ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000a34 <main+0x39c>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a20      	ldr	r2, [pc, #128]	@ (8000a40 <main+0x3a8>)
 80009c0:	61d3      	str	r3, [r2, #28]
 80009c2:	e03f      	b.n	8000a44 <main+0x3ac>
 80009c4:	2000013e 	.word	0x2000013e
 80009c8:	20000188 	.word	0x20000188
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40020400 	.word	0x40020400
 80009d4:	20000054 	.word	0x20000054
 80009d8:	20000000 	.word	0x20000000
 80009dc:	200000e4 	.word	0x200000e4
 80009e0:	2000000c 	.word	0x2000000c
 80009e4:	200000e8 	.word	0x200000e8
 80009e8:	20000004 	.word	0x20000004
 80009ec:	200000ec 	.word	0x200000ec
 80009f0:	200000f0 	.word	0x200000f0
 80009f4:	200000f4 	.word	0x200000f4
 80009f8:	200000f8 	.word	0x200000f8
 80009fc:	200000fc 	.word	0x200000fc
 8000a00:	20000100 	.word	0x20000100
 8000a04:	20000104 	.word	0x20000104
 8000a08:	20000108 	.word	0x20000108
 8000a0c:	2000010c 	.word	0x2000010c
 8000a10:	20000110 	.word	0x20000110
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000114 	.word	0x20000114
 8000a1c:	20000118 	.word	0x20000118
 8000a20:	2000011c 	.word	0x2000011c
 8000a24:	20000120 	.word	0x20000120
 8000a28:	20000124 	.word	0x20000124
 8000a2c:	20000128 	.word	0x20000128
 8000a30:	2000012c 	.word	0x2000012c
 8000a34:	20000130 	.word	0x20000130
 8000a38:	20000134 	.word	0x20000134
 8000a3c:	20000138 	.word	0x20000138
 8000a40:	200000a0 	.word	0x200000a0
			BL0910_package.AP4 = P9;
 8000a44:	4b32      	ldr	r3, [pc, #200]	@ (8000b10 <main+0x478>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a32      	ldr	r2, [pc, #200]	@ (8000b14 <main+0x47c>)
 8000a4a:	6213      	str	r3, [r2, #32]
			BL0910_package.AP5 = P10;
 8000a4c:	4b32      	ldr	r3, [pc, #200]	@ (8000b18 <main+0x480>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a30      	ldr	r2, [pc, #192]	@ (8000b14 <main+0x47c>)
 8000a52:	6253      	str	r3, [r2, #36]	@ 0x24


			BL0910_package.energy_value1 = P6*1/ 1000;
 8000a54:	4b31      	ldr	r3, [pc, #196]	@ (8000b1c <main+0x484>)
 8000a56:	ed93 7a00 	vldr	s14, [r3]
 8000a5a:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8000b20 <main+0x488>
 8000a5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a62:	4b2c      	ldr	r3, [pc, #176]	@ (8000b14 <main+0x47c>)
 8000a64:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			BL0910_package.energy_value2 = P7*1/ 1000;
 8000a68:	4b2e      	ldr	r3, [pc, #184]	@ (8000b24 <main+0x48c>)
 8000a6a:	ed93 7a00 	vldr	s14, [r3]
 8000a6e:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8000b20 <main+0x488>
 8000a72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a76:	4b27      	ldr	r3, [pc, #156]	@ (8000b14 <main+0x47c>)
 8000a78:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			BL0910_package.energy_value3 = P8*1/ 1000;
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b28 <main+0x490>)
 8000a7e:	ed93 7a00 	vldr	s14, [r3]
 8000a82:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8000b20 <main+0x488>
 8000a86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a8a:	4b22      	ldr	r3, [pc, #136]	@ (8000b14 <main+0x47c>)
 8000a8c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			BL0910_package.energy_value4 = P9*1/ 1000;
 8000a90:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <main+0x478>)
 8000a92:	ed93 7a00 	vldr	s14, [r3]
 8000a96:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8000b20 <main+0x488>
 8000a9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b14 <main+0x47c>)
 8000aa0:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
			BL0910_package.energy_value5 = P10*1/ 1000;
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b18 <main+0x480>)
 8000aa6:	ed93 7a00 	vldr	s14, [r3]
 8000aaa:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000b20 <main+0x488>
 8000aae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ab2:	4b18      	ldr	r3, [pc, #96]	@ (8000b14 <main+0x47c>)
 8000ab4:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	 	    BL0910_package.Voltage = vol;
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <main+0x494>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a15      	ldr	r2, [pc, #84]	@ (8000b14 <main+0x47c>)
 8000abe:	63d3      	str	r3, [r2, #60]	@ 0x3c
			BL0910_package.Freq = freq;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <main+0x498>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a13      	ldr	r2, [pc, #76]	@ (8000b14 <main+0x47c>)
 8000ac6:	6413      	str	r3, [r2, #64]	@ 0x40

			HAL_UART_Transmit(&huart4, &BL0910_package, sizeof(BL0910_package),100);
 8000ac8:	2364      	movs	r3, #100	@ 0x64
 8000aca:	2244      	movs	r2, #68	@ 0x44
 8000acc:	4911      	ldr	r1, [pc, #68]	@ (8000b14 <main+0x47c>)
 8000ace:	4819      	ldr	r0, [pc, #100]	@ (8000b34 <main+0x49c>)
 8000ad0:	f002 fe30 	bl	8003734 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &BL0910_package, sizeof(BL0910_package),100);
 8000ad4:	2364      	movs	r3, #100	@ 0x64
 8000ad6:	2244      	movs	r2, #68	@ 0x44
 8000ad8:	490e      	ldr	r1, [pc, #56]	@ (8000b14 <main+0x47c>)
 8000ada:	4817      	ldr	r0, [pc, #92]	@ (8000b38 <main+0x4a0>)
 8000adc:	f002 fe2a 	bl	8003734 <HAL_UART_Transmit>
			HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin); //LED_A Indicator
 8000ae0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ae4:	4815      	ldr	r0, [pc, #84]	@ (8000b3c <main+0x4a4>)
 8000ae6:	f001 fdca 	bl	800267e <HAL_GPIO_TogglePin>
	 	 	  }
	  if (relay_flag == 1)
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <main+0x4a8>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	f47f ae03 	bne.w	80006fc <main+0x64>
	      {   HAL_Delay(500);
 8000af6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000afa:	f001 fa43 	bl	8001f84 <HAL_Delay>
	          stateRELAY();  // Call relay control function
 8000afe:	f000 fda9 	bl	8001654 <stateRELAY>
	          HAL_Delay(50);
 8000b02:	2032      	movs	r0, #50	@ 0x32
 8000b04:	f001 fa3e 	bl	8001f84 <HAL_Delay>
	          relay_flag = 0;  // Clear flag
 8000b08:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <main+0x4a8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
	  if ( HAL_GetTick() - loop_timer > 2000 ){
 8000b0e:	e5f5      	b.n	80006fc <main+0x64>
 8000b10:	20000134 	.word	0x20000134
 8000b14:	200000a0 	.word	0x200000a0
 8000b18:	20000138 	.word	0x20000138
 8000b1c:	20000128 	.word	0x20000128
 8000b20:	447a0000 	.word	0x447a0000
 8000b24:	2000012c 	.word	0x2000012c
 8000b28:	20000130 	.word	0x20000130
 8000b2c:	200000e4 	.word	0x200000e4
 8000b30:	200000e8 	.word	0x200000e8
 8000b34:	20000188 	.word	0x20000188
 8000b38:	20000218 	.word	0x20000218
 8000b3c:	40020400 	.word	0x40020400
 8000b40:	2000013c 	.word	0x2000013c

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b094      	sub	sp, #80	@ 0x50
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 0320 	add.w	r3, r7, #32
 8000b4e:	2230      	movs	r2, #48	@ 0x30
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f004 f8b0 	bl	8004cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	4b28      	ldr	r3, [pc, #160]	@ (8000c10 <SystemClock_Config+0xcc>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b70:	4a27      	ldr	r2, [pc, #156]	@ (8000c10 <SystemClock_Config+0xcc>)
 8000b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b78:	4b25      	ldr	r3, [pc, #148]	@ (8000c10 <SystemClock_Config+0xcc>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	4b22      	ldr	r3, [pc, #136]	@ (8000c14 <SystemClock_Config+0xd0>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a21      	ldr	r2, [pc, #132]	@ (8000c14 <SystemClock_Config+0xd0>)
 8000b8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <SystemClock_Config+0xd0>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000baa:	2302      	movs	r3, #2
 8000bac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bb8:	23a8      	movs	r3, #168	@ 0xa8
 8000bba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc4:	f107 0320 	add.w	r3, r7, #32
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 fdf3 	bl	80027b4 <HAL_RCC_OscConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bd4:	f000 fe88 	bl	80018e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd8:	230f      	movs	r3, #15
 8000bda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000be4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000be8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2105      	movs	r1, #5
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f002 f854 	bl	8002ca4 <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c02:	f000 fe71 	bl	80018e8 <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3750      	adds	r7, #80	@ 0x50
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40007000 	.word	0x40007000

08000c18 <ChkSum_Cal>:

/* USER CODE BEGIN 4 */
//CHECKSUM byte is((ADDR+Data_L+Data_M+Data_H)& 0xFF) and then inverted by bit (based on datasheet)
uint8_t ChkSum_Cal(uint8_t Cmd,uint8_t REG_Addr,uint8_t *pData,uint8_t Size)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	603a      	str	r2, [r7, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
 8000c26:	460b      	mov	r3, r1
 8000c28:	71bb      	strb	r3, [r7, #6]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	uint8_t i;
	tmp=Cmd+ REG_Addr;
 8000c2e:	79fa      	ldrb	r2, [r7, #7]
 8000c30:	79bb      	ldrb	r3, [r7, #6]
 8000c32:	4413      	add	r3, r2
 8000c34:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < Size; ++i)
 8000c36:	2300      	movs	r3, #0
 8000c38:	73bb      	strb	r3, [r7, #14]
 8000c3a:	e009      	b.n	8000c50 <ChkSum_Cal+0x38>
		{
			tmp+=pData[i];
 8000c3c:	7bbb      	ldrb	r3, [r7, #14]
 8000c3e:	683a      	ldr	r2, [r7, #0]
 8000c40:	4413      	add	r3, r2
 8000c42:	781a      	ldrb	r2, [r3, #0]
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	4413      	add	r3, r2
 8000c48:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < Size; ++i)
 8000c4a:	7bbb      	ldrb	r3, [r7, #14]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	73bb      	strb	r3, [r7, #14]
 8000c50:	7bba      	ldrb	r2, [r7, #14]
 8000c52:	797b      	ldrb	r3, [r7, #5]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d3f1      	bcc.n	8000c3c <ChkSum_Cal+0x24>
		}
	tmp=~tmp;
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	73fb      	strb	r3, [r7, #15]
	return tmp;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <BL0910_Uart_Write>:
void BL0910_Uart_Write(uint8_t REG_Addr,B32_B8_TypeDef *pData)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
	uint8_t lb_SendData[6];
	lb_SendData[0]=pData->B8[0];
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	723b      	strb	r3, [r7, #8]
	lb_SendData[1]=pData->B8[1];
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	785b      	ldrb	r3, [r3, #1]
 8000c82:	727b      	strb	r3, [r7, #9]
	lb_SendData[2]=pData->B8[2];
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	789b      	ldrb	r3, [r3, #2]
 8000c88:	72bb      	strb	r3, [r7, #10]
	lb_SendData[5]=ChkSum_Cal(0x00,REG_Addr,lb_SendData,3);
 8000c8a:	f107 0208 	add.w	r2, r7, #8
 8000c8e:	79f9      	ldrb	r1, [r7, #7]
 8000c90:	2303      	movs	r3, #3
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff ffc0 	bl	8000c18 <ChkSum_Cal>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	737b      	strb	r3, [r7, #13]
	lb_SendData[0]=0xCA;
 8000c9c:	23ca      	movs	r3, #202	@ 0xca
 8000c9e:	723b      	strb	r3, [r7, #8]
	lb_SendData[1]=REG_Addr;
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	727b      	strb	r3, [r7, #9]
	lb_SendData[2]=pData->B8[0];
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	72bb      	strb	r3, [r7, #10]
	lb_SendData[3]=pData->B8[1];
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	785b      	ldrb	r3, [r3, #1]
 8000cae:	72fb      	strb	r3, [r7, #11]
	lb_SendData[4]=pData->B8[2];
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	789b      	ldrb	r3, [r3, #2]
 8000cb4:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart1,lb_SendData,6,200);
 8000cb6:	f107 0108 	add.w	r1, r7, #8
 8000cba:	23c8      	movs	r3, #200	@ 0xc8
 8000cbc:	2206      	movs	r2, #6
 8000cbe:	4803      	ldr	r0, [pc, #12]	@ (8000ccc <BL0910_Uart_Write+0x60>)
 8000cc0:	f002 fd38 	bl	8003734 <HAL_UART_Transmit>

}
 8000cc4:	bf00      	nop
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200001d0 	.word	0x200001d0

08000cd0 <BL0910_Uart_Read>:
void BL0910_Uart_Read(uint8_t REG_Addr,B32_B8_TypeDef *pData)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef	sta_UARTRec;
	uint8_t lb_SendData[2];
	uint8_t lb_RecData[4];
	uint8_t	lb_ChkSumCal;
	lb_SendData[0]=0x35;
 8000cdc:	2335      	movs	r3, #53	@ 0x35
 8000cde:	733b      	strb	r3, [r7, #12]
	lb_SendData[1]=REG_Addr;
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&huart1,lb_SendData,2,200);
 8000ce4:	f107 010c 	add.w	r1, r7, #12
 8000ce8:	23c8      	movs	r3, #200	@ 0xc8
 8000cea:	2202      	movs	r2, #2
 8000cec:	481b      	ldr	r0, [pc, #108]	@ (8000d5c <BL0910_Uart_Read+0x8c>)
 8000cee:	f002 fd21 	bl	8003734 <HAL_UART_Transmit>
	sta_UARTRec = HAL_UART_Receive(&huart1,lb_RecData,4,400);
 8000cf2:	f107 0108 	add.w	r1, r7, #8
 8000cf6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	4817      	ldr	r0, [pc, #92]	@ (8000d5c <BL0910_Uart_Read+0x8c>)
 8000cfe:	f002 fda4 	bl	800384a <HAL_UART_Receive>
 8000d02:	4603      	mov	r3, r0
 8000d04:	73fb      	strb	r3, [r7, #15]
	if (sta_UARTRec==HAL_OK)
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d120      	bne.n	8000d4e <BL0910_Uart_Read+0x7e>
		{
			lb_ChkSumCal=ChkSum_Cal(0x00,REG_Addr,lb_RecData,3);
 8000d0c:	f107 0208 	add.w	r2, r7, #8
 8000d10:	79f9      	ldrb	r1, [r7, #7]
 8000d12:	2303      	movs	r3, #3
 8000d14:	2000      	movs	r0, #0
 8000d16:	f7ff ff7f 	bl	8000c18 <ChkSum_Cal>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	73bb      	strb	r3, [r7, #14]
			if(lb_ChkSumCal==lb_RecData[3])
 8000d1e:	7afb      	ldrb	r3, [r7, #11]
 8000d20:	7bba      	ldrb	r2, [r7, #14]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d10f      	bne.n	8000d46 <BL0910_Uart_Read+0x76>
				{
					pData->B8[0]=lb_RecData[0];
 8000d26:	7a3a      	ldrb	r2, [r7, #8]
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	701a      	strb	r2, [r3, #0]
					pData->B8[1]=lb_RecData[1];
 8000d2c:	7a7a      	ldrb	r2, [r7, #9]
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	705a      	strb	r2, [r3, #1]
					pData->B8[2]=lb_RecData[2];
 8000d32:	7aba      	ldrb	r2, [r7, #10]
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	709a      	strb	r2, [r3, #2]
					pData->B8[3]=lb_RecData[3];				//CHKSUM
 8000d38:	7afa      	ldrb	r2, [r7, #11]
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	70da      	strb	r2, [r3, #3]
					BL0910_ComSta=COM_OK;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <BL0910_Uart_Read+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
		}
	else			//Check communicate status
		{
				BL0910_ComSta=COM_ERROR;
		}
}
 8000d44:	e006      	b.n	8000d54 <BL0910_Uart_Read+0x84>
				BL0910_ComSta=COM_CHKERR;
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <BL0910_Uart_Read+0x90>)
 8000d48:	2202      	movs	r2, #2
 8000d4a:	701a      	strb	r2, [r3, #0]
}
 8000d4c:	e002      	b.n	8000d54 <BL0910_Uart_Read+0x84>
				BL0910_ComSta=COM_ERROR;
 8000d4e:	4b04      	ldr	r3, [pc, #16]	@ (8000d60 <BL0910_Uart_Read+0x90>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200001d0 	.word	0x200001d0
 8000d60:	2000009a 	.word	0x2000009a

08000d64 <BL0910_Init>:
	}
	HAL_Delay(1);

}
void BL0910_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	BL0910_Data.B8[0]=0x55;
 8000d68:	4b2b      	ldr	r3, [pc, #172]	@ (8000e18 <BL0910_Init+0xb4>)
 8000d6a:	2255      	movs	r2, #85	@ 0x55
 8000d6c:	701a      	strb	r2, [r3, #0]
	BL0910_Data.B8[1]=0x55;
 8000d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e18 <BL0910_Init+0xb4>)
 8000d70:	2255      	movs	r2, #85	@ 0x55
 8000d72:	705a      	strb	r2, [r3, #1]
	BL0910_Data.B8[2]=0x00;
 8000d74:	4b28      	ldr	r3, [pc, #160]	@ (8000e18 <BL0910_Init+0xb4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	709a      	strb	r2, [r3, #2]
	BL0910_Write(Addr_USR_WRPROT, &BL0910_Data);
 8000d7a:	4927      	ldr	r1, [pc, #156]	@ (8000e18 <BL0910_Init+0xb4>)
 8000d7c:	209e      	movs	r0, #158	@ 0x9e
 8000d7e:	f000 fc4b 	bl	8001618 <BL0910_Write>
	HAL_Delay(1);
 8000d82:	2001      	movs	r0, #1
 8000d84:	f001 f8fe 	bl	8001f84 <HAL_Delay>
	BL0910_Data.B32=0x010600;
 8000d88:	4b23      	ldr	r3, [pc, #140]	@ (8000e18 <BL0910_Init+0xb4>)
 8000d8a:	f44f 3283 	mov.w	r2, #67072	@ 0x10600
 8000d8e:	601a      	str	r2, [r3, #0]
	BL0910_Write(Addr_MODE3, &BL0910_Data);
 8000d90:	4921      	ldr	r1, [pc, #132]	@ (8000e18 <BL0910_Init+0xb4>)
 8000d92:	2098      	movs	r0, #152	@ 0x98
 8000d94:	f000 fc40 	bl	8001618 <BL0910_Write>

	BL0910_Data.B32=0x333330;
 8000d98:	4b1f      	ldr	r3, [pc, #124]	@ (8000e18 <BL0910_Init+0xb4>)
 8000d9a:	4a20      	ldr	r2, [pc, #128]	@ (8000e1c <BL0910_Init+0xb8>)
 8000d9c:	601a      	str	r2, [r3, #0]
	BL0910_Write(Addr_GAIN1, &BL0910_Data);
 8000d9e:	491e      	ldr	r1, [pc, #120]	@ (8000e18 <BL0910_Init+0xb4>)
 8000da0:	2060      	movs	r0, #96	@ 0x60
 8000da2:	f000 fc39 	bl	8001618 <BL0910_Write>
	BL0910_Data.B32=0x033333;
 8000da6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e18 <BL0910_Init+0xb4>)
 8000da8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e20 <BL0910_Init+0xbc>)
 8000daa:	601a      	str	r2, [r3, #0]
	BL0910_Write(Addr_GAIN2, &BL0910_Data);
 8000dac:	491a      	ldr	r1, [pc, #104]	@ (8000e18 <BL0910_Init+0xb4>)
 8000dae:	2061      	movs	r0, #97	@ 0x61
 8000db0:	f000 fc32 	bl	8001618 <BL0910_Write>

	BL0910_Data.B32=Current_K*8/100;
 8000db4:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <BL0910_Init+0xb4>)
 8000db6:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8000dba:	601a      	str	r2, [r3, #0]
	BL0910_Write(Addr_RMS_CREEP, &BL0910_Data);
 8000dbc:	4916      	ldr	r1, [pc, #88]	@ (8000e18 <BL0910_Init+0xb4>)
 8000dbe:	208a      	movs	r0, #138	@ 0x8a
 8000dc0:	f000 fc2a 	bl	8001618 <BL0910_Write>
	BL0910_Data.B32 = Power_K / 10;
 8000dc4:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <BL0910_Init+0xb4>)
 8000dc6:	f241 5268 	movw	r2, #5480	@ 0x1568
 8000dca:	601a      	str	r2, [r3, #0]
	BL0910_Write(Addr_VAR_WATT_CREEP, &BL0910_Data);
 8000dcc:	4912      	ldr	r1, [pc, #72]	@ (8000e18 <BL0910_Init+0xb4>)
 8000dce:	2088      	movs	r0, #136	@ 0x88
 8000dd0:	f000 fc22 	bl	8001618 <BL0910_Write>

	BL0910_Data.B32 = 0x1FFF;
 8000dd4:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <BL0910_Init+0xb4>)
 8000dd6:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000dda:	601a      	str	r2, [r3, #0]
	BL0910_Write(Addr_RST_ENG, &BL0910_Data);
 8000ddc:	490e      	ldr	r1, [pc, #56]	@ (8000e18 <BL0910_Init+0xb4>)
 8000dde:	209d      	movs	r0, #157	@ 0x9d
 8000de0:	f000 fc1a 	bl	8001618 <BL0910_Write>

	BL0910_Data.B32 = 0x5A5A5A;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <BL0910_Init+0xb4>)
 8000de6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e24 <BL0910_Init+0xc0>)
 8000de8:	601a      	str	r2, [r3, #0]
	BL0910_Write(Addr_SOFT_RESET, &BL0910_Data);
 8000dea:	490b      	ldr	r1, [pc, #44]	@ (8000e18 <BL0910_Init+0xb4>)
 8000dec:	209f      	movs	r0, #159	@ 0x9f
 8000dee:	f000 fc13 	bl	8001618 <BL0910_Write>
	HAL_Delay(2);
 8000df2:	2002      	movs	r0, #2
 8000df4:	f001 f8c6 	bl	8001f84 <HAL_Delay>
	// ر д
	BL0910_Data.B8[0] = 0x00;
 8000df8:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <BL0910_Init+0xb4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
	BL0910_Data.B8[1] = 0x00;
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <BL0910_Init+0xb4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	705a      	strb	r2, [r3, #1]
	BL0910_Data.B8[2] = 0x00;
 8000e04:	4b04      	ldr	r3, [pc, #16]	@ (8000e18 <BL0910_Init+0xb4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	709a      	strb	r2, [r3, #2]
	BL0910_Write(Addr_USR_WRPROT, &BL0910_Data);
 8000e0a:	4903      	ldr	r1, [pc, #12]	@ (8000e18 <BL0910_Init+0xb4>)
 8000e0c:	209e      	movs	r0, #158	@ 0x9e
 8000e0e:	f000 fc03 	bl	8001618 <BL0910_Write>


}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2000009c 	.word	0x2000009c
 8000e1c:	00333330 	.word	0x00333330
 8000e20:	00033333 	.word	0x00033333
 8000e24:	005a5a5a 	.word	0x005a5a5a

08000e28 <BL0910_Elect_Proc>:
void BL0910_Elect_Proc(void){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
	B32_B8_TypeDef tmp_D;
	//Read the effective value of 10 channels of currentֵ
	BL0910_Read(Addr_1_RMS, &BL0910_Data);
 8000e2e:	49a7      	ldr	r1, [pc, #668]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000e30:	200c      	movs	r0, #12
 8000e32:	f000 fc00 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 8000e36:	4ba5      	ldr	r3, [pc, #660]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	71fb      	strb	r3, [r7, #7]
	//Remove the check Byte
	tmp_D.B32=tmp_D.B32*100/Current_K; //Current_K is reduced by 10 times, *100 is magnification 100 times, so the total amplification of current is 1000 times.
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2264      	movs	r2, #100	@ 0x64
 8000e44:	fb02 f303 	mul.w	r3, r2, r3
 8000e48:	4aa1      	ldr	r2, [pc, #644]	@ (80010d0 <BL0910_Elect_Proc+0x2a8>)
 8000e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4e:	0b5b      	lsrs	r3, r3, #13
 8000e50:	607b      	str	r3, [r7, #4]
	BL0910_Elect.RMS_1=tmp_D.B32;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	4b9f      	ldr	r3, [pc, #636]	@ (80010d4 <BL0910_Elect_Proc+0x2ac>)
 8000e58:	801a      	strh	r2, [r3, #0]
	BL0910_Read(Addr_2_RMS, &BL0910_Data);
 8000e5a:	499c      	ldr	r1, [pc, #624]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000e5c:	200d      	movs	r0, #13
 8000e5e:	f000 fbea 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 8000e62:	4b9a      	ldr	r3, [pc, #616]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32=tmp_D.B32*100/Current_K;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2264      	movs	r2, #100	@ 0x64
 8000e70:	fb02 f303 	mul.w	r3, r2, r3
 8000e74:	4a96      	ldr	r2, [pc, #600]	@ (80010d0 <BL0910_Elect_Proc+0x2a8>)
 8000e76:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7a:	0b5b      	lsrs	r3, r3, #13
 8000e7c:	607b      	str	r3, [r7, #4]
	BL0910_Elect.RMS_2=tmp_D.B32;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b94      	ldr	r3, [pc, #592]	@ (80010d4 <BL0910_Elect_Proc+0x2ac>)
 8000e84:	805a      	strh	r2, [r3, #2]
	BL0910_Read(Addr_3_RMS, &BL0910_Data);
 8000e86:	4991      	ldr	r1, [pc, #580]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000e88:	200e      	movs	r0, #14
 8000e8a:	f000 fbd4 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 8000e8e:	4b8f      	ldr	r3, [pc, #572]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32=tmp_D.B32*100/Current_K;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2264      	movs	r2, #100	@ 0x64
 8000e9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ea0:	4a8b      	ldr	r2, [pc, #556]	@ (80010d0 <BL0910_Elect_Proc+0x2a8>)
 8000ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea6:	0b5b      	lsrs	r3, r3, #13
 8000ea8:	607b      	str	r3, [r7, #4]
	BL0910_Elect.RMS_3=tmp_D.B32;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	4b89      	ldr	r3, [pc, #548]	@ (80010d4 <BL0910_Elect_Proc+0x2ac>)
 8000eb0:	809a      	strh	r2, [r3, #4]
	BL0910_Read(Addr_4_RMS, &BL0910_Data);
 8000eb2:	4986      	ldr	r1, [pc, #536]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000eb4:	200f      	movs	r0, #15
 8000eb6:	f000 fbbe 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 8000eba:	4b84      	ldr	r3, [pc, #528]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32=tmp_D.B32*100/Current_K;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2264      	movs	r2, #100	@ 0x64
 8000ec8:	fb02 f303 	mul.w	r3, r2, r3
 8000ecc:	4a80      	ldr	r2, [pc, #512]	@ (80010d0 <BL0910_Elect_Proc+0x2a8>)
 8000ece:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed2:	0b5b      	lsrs	r3, r3, #13
 8000ed4:	607b      	str	r3, [r7, #4]
	BL0910_Elect.RMS_4=tmp_D.B32;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	4b7e      	ldr	r3, [pc, #504]	@ (80010d4 <BL0910_Elect_Proc+0x2ac>)
 8000edc:	80da      	strh	r2, [r3, #6]
	BL0910_Read(Addr_5_RMS, &BL0910_Data);
 8000ede:	497b      	ldr	r1, [pc, #492]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000ee0:	2010      	movs	r0, #16
 8000ee2:	f000 fba8 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 8000ee6:	4b79      	ldr	r3, [pc, #484]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32=tmp_D.B32*100/Current_K;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2264      	movs	r2, #100	@ 0x64
 8000ef4:	fb02 f303 	mul.w	r3, r2, r3
 8000ef8:	4a75      	ldr	r2, [pc, #468]	@ (80010d0 <BL0910_Elect_Proc+0x2a8>)
 8000efa:	fba2 2303 	umull	r2, r3, r2, r3
 8000efe:	0b5b      	lsrs	r3, r3, #13
 8000f00:	607b      	str	r3, [r7, #4]
	BL0910_Elect.RMS_5=tmp_D.B32;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	4b73      	ldr	r3, [pc, #460]	@ (80010d4 <BL0910_Elect_Proc+0x2ac>)
 8000f08:	811a      	strh	r2, [r3, #8]
	BL0910_Read(Addr_6_RMS, &BL0910_Data);
 8000f0a:	4970      	ldr	r1, [pc, #448]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000f0c:	2011      	movs	r0, #17
 8000f0e:	f000 fb92 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 8000f12:	4b6e      	ldr	r3, [pc, #440]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32=tmp_D.B32*100/Current_K;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2264      	movs	r2, #100	@ 0x64
 8000f20:	fb02 f303 	mul.w	r3, r2, r3
 8000f24:	4a6a      	ldr	r2, [pc, #424]	@ (80010d0 <BL0910_Elect_Proc+0x2a8>)
 8000f26:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2a:	0b5b      	lsrs	r3, r3, #13
 8000f2c:	607b      	str	r3, [r7, #4]
	BL0910_Elect.RMS_6=tmp_D.B32;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4b68      	ldr	r3, [pc, #416]	@ (80010d4 <BL0910_Elect_Proc+0x2ac>)
 8000f34:	815a      	strh	r2, [r3, #10]
	BL0910_Read(Addr_7_RMS, &BL0910_Data);
 8000f36:	4965      	ldr	r1, [pc, #404]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000f38:	2012      	movs	r0, #18
 8000f3a:	f000 fb7c 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 8000f3e:	4b63      	ldr	r3, [pc, #396]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32=tmp_D.B32*100/Current_K;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2264      	movs	r2, #100	@ 0x64
 8000f4c:	fb02 f303 	mul.w	r3, r2, r3
 8000f50:	4a5f      	ldr	r2, [pc, #380]	@ (80010d0 <BL0910_Elect_Proc+0x2a8>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	0b5b      	lsrs	r3, r3, #13
 8000f58:	607b      	str	r3, [r7, #4]
	BL0910_Elect.RMS_7=tmp_D.B32;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	4b5d      	ldr	r3, [pc, #372]	@ (80010d4 <BL0910_Elect_Proc+0x2ac>)
 8000f60:	819a      	strh	r2, [r3, #12]
	BL0910_Read(Addr_8_RMS, &BL0910_Data);
 8000f62:	495a      	ldr	r1, [pc, #360]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000f64:	2013      	movs	r0, #19
 8000f66:	f000 fb66 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 8000f6a:	4b58      	ldr	r3, [pc, #352]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32=tmp_D.B32*100/Current_K;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2264      	movs	r2, #100	@ 0x64
 8000f78:	fb02 f303 	mul.w	r3, r2, r3
 8000f7c:	4a54      	ldr	r2, [pc, #336]	@ (80010d0 <BL0910_Elect_Proc+0x2a8>)
 8000f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f82:	0b5b      	lsrs	r3, r3, #13
 8000f84:	607b      	str	r3, [r7, #4]
	BL0910_Elect.RMS_8=tmp_D.B32;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	4b52      	ldr	r3, [pc, #328]	@ (80010d4 <BL0910_Elect_Proc+0x2ac>)
 8000f8c:	81da      	strh	r2, [r3, #14]
	BL0910_Read(Addr_9_RMS, &BL0910_Data);
 8000f8e:	494f      	ldr	r1, [pc, #316]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000f90:	2014      	movs	r0, #20
 8000f92:	f000 fb50 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 8000f96:	4b4d      	ldr	r3, [pc, #308]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32=tmp_D.B32*100/Current_K;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2264      	movs	r2, #100	@ 0x64
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	4a49      	ldr	r2, [pc, #292]	@ (80010d0 <BL0910_Elect_Proc+0x2a8>)
 8000faa:	fba2 2303 	umull	r2, r3, r2, r3
 8000fae:	0b5b      	lsrs	r3, r3, #13
 8000fb0:	607b      	str	r3, [r7, #4]
	BL0910_Elect.RMS_9=tmp_D.B32;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	4b47      	ldr	r3, [pc, #284]	@ (80010d4 <BL0910_Elect_Proc+0x2ac>)
 8000fb8:	821a      	strh	r2, [r3, #16]
	BL0910_Read(Addr_10_RMS, &BL0910_Data);
 8000fba:	4944      	ldr	r1, [pc, #272]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000fbc:	2015      	movs	r0, #21
 8000fbe:	f000 fb3a 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 8000fc2:	4b42      	ldr	r3, [pc, #264]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32=tmp_D.B32*100/Current_K;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2264      	movs	r2, #100	@ 0x64
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	4a3e      	ldr	r2, [pc, #248]	@ (80010d0 <BL0910_Elect_Proc+0x2a8>)
 8000fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fda:	0b5b      	lsrs	r3, r3, #13
 8000fdc:	607b      	str	r3, [r7, #4]
	BL0910_Elect.RMS_10=tmp_D.B32;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4b3c      	ldr	r3, [pc, #240]	@ (80010d4 <BL0910_Elect_Proc+0x2ac>)
 8000fe4:	825a      	strh	r2, [r3, #18]

	//Read the effective value of voltage ֵ
	BL0910_Read(Addr_V_RMS, &BL0910_Data);
 8000fe6:	4939      	ldr	r1, [pc, #228]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000fe8:	2016      	movs	r0, #22
 8000fea:	f000 fb24 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 8000fee:	4b37      	ldr	r3, [pc, #220]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32=tmp_D.B32*100/Voltage_k;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2264      	movs	r2, #100	@ 0x64
 8000ffc:	fb02 f303 	mul.w	r3, r2, r3
 8001000:	4a35      	ldr	r2, [pc, #212]	@ (80010d8 <BL0910_Elect_Proc+0x2b0>)
 8001002:	fba2 2303 	umull	r2, r3, r2, r3
 8001006:	0b5b      	lsrs	r3, r3, #13
 8001008:	607b      	str	r3, [r7, #4]
	BL0910_Elect.RMS_V=tmp_D.B32;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	b29a      	uxth	r2, r3
 800100e:	4b31      	ldr	r3, [pc, #196]	@ (80010d4 <BL0910_Elect_Proc+0x2ac>)
 8001010:	829a      	strh	r2, [r3, #20]

	//Read 10 active power
	BL0910_Read(Addr_WATT1, &BL0910_Data);
 8001012:	492e      	ldr	r1, [pc, #184]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8001014:	2022      	movs	r0, #34	@ 0x22
 8001016:	f000 fb0e 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 800101a:	4b2c      	ldr	r3, [pc, #176]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 8001020:	2300      	movs	r3, #0
 8001022:	71fb      	strb	r3, [r7, #7]
	if (tmp_D.B32>=8388607) //Determine whether the power is reversed and do the supplementary code conversion.
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a2d      	ldr	r2, [pc, #180]	@ (80010dc <BL0910_Elect_Proc+0x2b4>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d903      	bls.n	8001034 <BL0910_Elect_Proc+0x20c>
		{
			tmp_D.B32=0x1000000-tmp_D.B32;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8001032:	607b      	str	r3, [r7, #4]
		}
	//Power_K is magnified by 10 times, *100 is magnified by 100 times, so the total power magnification is 10 times.
	tmp_D.B32=tmp_D.B32*100/Power_K;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2264      	movs	r2, #100	@ 0x64
 8001038:	fb02 f303 	mul.w	r3, r2, r3
 800103c:	4a28      	ldr	r2, [pc, #160]	@ (80010e0 <BL0910_Elect_Proc+0x2b8>)
 800103e:	fba2 2303 	umull	r2, r3, r2, r3
 8001042:	0bdb      	lsrs	r3, r3, #15
 8001044:	607b      	str	r3, [r7, #4]
	BL0910_Elect.WATT_1=tmp_D.B32;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	b29a      	uxth	r2, r3
 800104a:	4b22      	ldr	r3, [pc, #136]	@ (80010d4 <BL0910_Elect_Proc+0x2ac>)
 800104c:	82da      	strh	r2, [r3, #22]
	BL0910_Read(Addr_WATT2, &BL0910_Data);
 800104e:	491f      	ldr	r1, [pc, #124]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8001050:	2023      	movs	r0, #35	@ 0x23
 8001052:	f000 faf0 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 8001056:	4b1d      	ldr	r3, [pc, #116]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 800105c:	2300      	movs	r3, #0
 800105e:	71fb      	strb	r3, [r7, #7]
	if (tmp_D.B32>=8388607)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a1e      	ldr	r2, [pc, #120]	@ (80010dc <BL0910_Elect_Proc+0x2b4>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d903      	bls.n	8001070 <BL0910_Elect_Proc+0x248>
		{
			tmp_D.B32=0x1000000-tmp_D.B32;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800106e:	607b      	str	r3, [r7, #4]
		}
	tmp_D.B32=tmp_D.B32*100/Power_K;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2264      	movs	r2, #100	@ 0x64
 8001074:	fb02 f303 	mul.w	r3, r2, r3
 8001078:	4a19      	ldr	r2, [pc, #100]	@ (80010e0 <BL0910_Elect_Proc+0x2b8>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	0bdb      	lsrs	r3, r3, #15
 8001080:	607b      	str	r3, [r7, #4]
	BL0910_Elect.WATT_2=tmp_D.B32;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	b29a      	uxth	r2, r3
 8001086:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <BL0910_Elect_Proc+0x2ac>)
 8001088:	831a      	strh	r2, [r3, #24]
	BL0910_Read(Addr_WATT3, &BL0910_Data);
 800108a:	4910      	ldr	r1, [pc, #64]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 800108c:	2024      	movs	r0, #36	@ 0x24
 800108e:	f000 fad2 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 8001092:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 8001098:	2300      	movs	r3, #0
 800109a:	71fb      	strb	r3, [r7, #7]
	if (tmp_D.B32>=8388607)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a0f      	ldr	r2, [pc, #60]	@ (80010dc <BL0910_Elect_Proc+0x2b4>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d903      	bls.n	80010ac <BL0910_Elect_Proc+0x284>
		{
			tmp_D.B32=0x1000000-tmp_D.B32;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80010aa:	607b      	str	r3, [r7, #4]
		}
	tmp_D.B32=tmp_D.B32*100/Power_K;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2264      	movs	r2, #100	@ 0x64
 80010b0:	fb02 f303 	mul.w	r3, r2, r3
 80010b4:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <BL0910_Elect_Proc+0x2b8>)
 80010b6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ba:	0bdb      	lsrs	r3, r3, #15
 80010bc:	607b      	str	r3, [r7, #4]
	BL0910_Elect.WATT_3=tmp_D.B32;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <BL0910_Elect_Proc+0x2ac>)
 80010c4:	835a      	strh	r2, [r3, #26]
	BL0910_Read(Addr_WATT4, &BL0910_Data);
 80010c6:	4901      	ldr	r1, [pc, #4]	@ (80010cc <BL0910_Elect_Proc+0x2a4>)
 80010c8:	2025      	movs	r0, #37	@ 0x25
 80010ca:	e00b      	b.n	80010e4 <BL0910_Elect_Proc+0x2bc>
 80010cc:	2000009c 	.word	0x2000009c
 80010d0:	6d7d2e0f 	.word	0x6d7d2e0f
 80010d4:	20000054 	.word	0x20000054
 80010d8:	e90452d5 	.word	0xe90452d5
 80010dc:	007ffffe 	.word	0x007ffffe
 80010e0:	99101527 	.word	0x99101527
 80010e4:	f000 faa7 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 80010e8:	4b9f      	ldr	r3, [pc, #636]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	71fb      	strb	r3, [r7, #7]
	if (tmp_D.B32>=8388607)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a9d      	ldr	r2, [pc, #628]	@ (800136c <BL0910_Elect_Proc+0x544>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d903      	bls.n	8001102 <BL0910_Elect_Proc+0x2da>
		{
			tmp_D.B32=0x1000000-tmp_D.B32;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8001100:	607b      	str	r3, [r7, #4]
		}
	tmp_D.B32=tmp_D.B32*100/Power_K;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2264      	movs	r2, #100	@ 0x64
 8001106:	fb02 f303 	mul.w	r3, r2, r3
 800110a:	4a99      	ldr	r2, [pc, #612]	@ (8001370 <BL0910_Elect_Proc+0x548>)
 800110c:	fba2 2303 	umull	r2, r3, r2, r3
 8001110:	0bdb      	lsrs	r3, r3, #15
 8001112:	607b      	str	r3, [r7, #4]
	BL0910_Elect.WATT_4=tmp_D.B32;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	b29a      	uxth	r2, r3
 8001118:	4b96      	ldr	r3, [pc, #600]	@ (8001374 <BL0910_Elect_Proc+0x54c>)
 800111a:	839a      	strh	r2, [r3, #28]
	BL0910_Read(Addr_WATT5, &BL0910_Data);
 800111c:	4992      	ldr	r1, [pc, #584]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 800111e:	2026      	movs	r0, #38	@ 0x26
 8001120:	f000 fa89 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 8001124:	4b90      	ldr	r3, [pc, #576]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 800112a:	2300      	movs	r3, #0
 800112c:	71fb      	strb	r3, [r7, #7]
	if (tmp_D.B32>=8388607)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a8e      	ldr	r2, [pc, #568]	@ (800136c <BL0910_Elect_Proc+0x544>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d903      	bls.n	800113e <BL0910_Elect_Proc+0x316>
		{
			tmp_D.B32=0x1000000-tmp_D.B32;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800113c:	607b      	str	r3, [r7, #4]
		}
	tmp_D.B32=tmp_D.B32*100/Power_K;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2264      	movs	r2, #100	@ 0x64
 8001142:	fb02 f303 	mul.w	r3, r2, r3
 8001146:	4a8a      	ldr	r2, [pc, #552]	@ (8001370 <BL0910_Elect_Proc+0x548>)
 8001148:	fba2 2303 	umull	r2, r3, r2, r3
 800114c:	0bdb      	lsrs	r3, r3, #15
 800114e:	607b      	str	r3, [r7, #4]
	BL0910_Elect.WATT_5=tmp_D.B32;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b87      	ldr	r3, [pc, #540]	@ (8001374 <BL0910_Elect_Proc+0x54c>)
 8001156:	83da      	strh	r2, [r3, #30]
	BL0910_Read(Addr_WATT6, &BL0910_Data);
 8001158:	4983      	ldr	r1, [pc, #524]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 800115a:	2027      	movs	r0, #39	@ 0x27
 800115c:	f000 fa6b 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 8001160:	4b81      	ldr	r3, [pc, #516]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 8001166:	2300      	movs	r3, #0
 8001168:	71fb      	strb	r3, [r7, #7]
	if (tmp_D.B32>=8388607)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a7f      	ldr	r2, [pc, #508]	@ (800136c <BL0910_Elect_Proc+0x544>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d903      	bls.n	800117a <BL0910_Elect_Proc+0x352>
		{
			tmp_D.B32=0x1000000-tmp_D.B32;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8001178:	607b      	str	r3, [r7, #4]
		}
	tmp_D.B32=tmp_D.B32*100/Power_K;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2264      	movs	r2, #100	@ 0x64
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	4a7b      	ldr	r2, [pc, #492]	@ (8001370 <BL0910_Elect_Proc+0x548>)
 8001184:	fba2 2303 	umull	r2, r3, r2, r3
 8001188:	0bdb      	lsrs	r3, r3, #15
 800118a:	607b      	str	r3, [r7, #4]
	BL0910_Elect.WATT_6=tmp_D.B32;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b78      	ldr	r3, [pc, #480]	@ (8001374 <BL0910_Elect_Proc+0x54c>)
 8001192:	841a      	strh	r2, [r3, #32]
	BL0910_Read(Addr_WATT7, &BL0910_Data);
 8001194:	4974      	ldr	r1, [pc, #464]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 8001196:	2028      	movs	r0, #40	@ 0x28
 8001198:	f000 fa4d 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 800119c:	4b72      	ldr	r3, [pc, #456]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	71fb      	strb	r3, [r7, #7]
	if (tmp_D.B32>=8388607)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a70      	ldr	r2, [pc, #448]	@ (800136c <BL0910_Elect_Proc+0x544>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d903      	bls.n	80011b6 <BL0910_Elect_Proc+0x38e>
		{
			tmp_D.B32=0x1000000-tmp_D.B32;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80011b4:	607b      	str	r3, [r7, #4]
		}
	tmp_D.B32=tmp_D.B32*100/Power_K;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2264      	movs	r2, #100	@ 0x64
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	4a6c      	ldr	r2, [pc, #432]	@ (8001370 <BL0910_Elect_Proc+0x548>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	0bdb      	lsrs	r3, r3, #15
 80011c6:	607b      	str	r3, [r7, #4]
	BL0910_Elect.WATT_7=tmp_D.B32;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b69      	ldr	r3, [pc, #420]	@ (8001374 <BL0910_Elect_Proc+0x54c>)
 80011ce:	845a      	strh	r2, [r3, #34]	@ 0x22
	BL0910_Read(Addr_WATT8, &BL0910_Data);
 80011d0:	4965      	ldr	r1, [pc, #404]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 80011d2:	2029      	movs	r0, #41	@ 0x29
 80011d4:	f000 fa2f 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 80011d8:	4b63      	ldr	r3, [pc, #396]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 80011de:	2300      	movs	r3, #0
 80011e0:	71fb      	strb	r3, [r7, #7]
	if (tmp_D.B32>=8388607)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a61      	ldr	r2, [pc, #388]	@ (800136c <BL0910_Elect_Proc+0x544>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d903      	bls.n	80011f2 <BL0910_Elect_Proc+0x3ca>
		{


			tmp_D.B32=0x1000000-tmp_D.B32;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80011f0:	607b      	str	r3, [r7, #4]
		}
	tmp_D.B32=tmp_D.B32*100/Power_K;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2264      	movs	r2, #100	@ 0x64
 80011f6:	fb02 f303 	mul.w	r3, r2, r3
 80011fa:	4a5d      	ldr	r2, [pc, #372]	@ (8001370 <BL0910_Elect_Proc+0x548>)
 80011fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001200:	0bdb      	lsrs	r3, r3, #15
 8001202:	607b      	str	r3, [r7, #4]
	BL0910_Elect.WATT_8=tmp_D.B32;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	b29a      	uxth	r2, r3
 8001208:	4b5a      	ldr	r3, [pc, #360]	@ (8001374 <BL0910_Elect_Proc+0x54c>)
 800120a:	849a      	strh	r2, [r3, #36]	@ 0x24
	BL0910_Read(Addr_WATT9, &BL0910_Data);
 800120c:	4956      	ldr	r1, [pc, #344]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 800120e:	202a      	movs	r0, #42	@ 0x2a
 8001210:	f000 fa11 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 8001214:	4b54      	ldr	r3, [pc, #336]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 800121a:	2300      	movs	r3, #0
 800121c:	71fb      	strb	r3, [r7, #7]
	if (tmp_D.B32>=8388607)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a52      	ldr	r2, [pc, #328]	@ (800136c <BL0910_Elect_Proc+0x544>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d903      	bls.n	800122e <BL0910_Elect_Proc+0x406>
		{
			tmp_D.B32=0x1000000-tmp_D.B32;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800122c:	607b      	str	r3, [r7, #4]
		}
	tmp_D.B32=tmp_D.B32*100/Power_K;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2264      	movs	r2, #100	@ 0x64
 8001232:	fb02 f303 	mul.w	r3, r2, r3
 8001236:	4a4e      	ldr	r2, [pc, #312]	@ (8001370 <BL0910_Elect_Proc+0x548>)
 8001238:	fba2 2303 	umull	r2, r3, r2, r3
 800123c:	0bdb      	lsrs	r3, r3, #15
 800123e:	607b      	str	r3, [r7, #4]
	BL0910_Elect.WATT_9=tmp_D.B32;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	b29a      	uxth	r2, r3
 8001244:	4b4b      	ldr	r3, [pc, #300]	@ (8001374 <BL0910_Elect_Proc+0x54c>)
 8001246:	84da      	strh	r2, [r3, #38]	@ 0x26
	BL0910_Read(Addr_WATT10, &BL0910_Data);
 8001248:	4947      	ldr	r1, [pc, #284]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 800124a:	202b      	movs	r0, #43	@ 0x2b
 800124c:	f000 f9f3 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 8001250:	4b45      	ldr	r3, [pc, #276]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 8001256:	2300      	movs	r3, #0
 8001258:	71fb      	strb	r3, [r7, #7]
	if (tmp_D.B32>=8388607)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a43      	ldr	r2, [pc, #268]	@ (800136c <BL0910_Elect_Proc+0x544>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d903      	bls.n	800126a <BL0910_Elect_Proc+0x442>
		{
			tmp_D.B32=0x1000000-tmp_D.B32;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8001268:	607b      	str	r3, [r7, #4]
		}
	tmp_D.B32=tmp_D.B32*100/Power_K;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2264      	movs	r2, #100	@ 0x64
 800126e:	fb02 f303 	mul.w	r3, r2, r3
 8001272:	4a3f      	ldr	r2, [pc, #252]	@ (8001370 <BL0910_Elect_Proc+0x548>)
 8001274:	fba2 2303 	umull	r2, r3, r2, r3
 8001278:	0bdb      	lsrs	r3, r3, #15
 800127a:	607b      	str	r3, [r7, #4]
	BL0910_Elect.WATT_10=tmp_D.B32;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	b29a      	uxth	r2, r3
 8001280:	4b3c      	ldr	r3, [pc, #240]	@ (8001374 <BL0910_Elect_Proc+0x54c>)
 8001282:	851a      	strh	r2, [r3, #40]	@ 0x28
	//Reading frequency
	BL0910_Read(Addr_PERIOD, &BL0910_Data);
 8001284:	4938      	ldr	r1, [pc, #224]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 8001286:	204e      	movs	r0, #78	@ 0x4e
 8001288:	f000 f9d5 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 800128c:	4b36      	ldr	r3, [pc, #216]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 8001292:	2300      	movs	r3, #0
 8001294:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32=10000000*100/tmp_D.B32;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a37      	ldr	r2, [pc, #220]	@ (8001378 <BL0910_Elect_Proc+0x550>)
 800129a:	fbb2 f3f3 	udiv	r3, r2, r3
 800129e:	607b      	str	r3, [r7, #4]
	BL0910_Elect.Period=tmp_D.B32;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	4b33      	ldr	r3, [pc, #204]	@ (8001374 <BL0910_Elect_Proc+0x54c>)
 80012a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	// Read 10 active pulse counts to calculate the accumulation of electrical energy.
	BL0910_Read(Addr_CF1_CNT, &BL0910_Data);
 80012aa:	492f      	ldr	r1, [pc, #188]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 80012ac:	202f      	movs	r0, #47	@ 0x2f
 80012ae:	f000 f9c2 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 80012b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32+=Eng_CFCnt.Cnt1;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a2f      	ldr	r2, [pc, #188]	@ (800137c <BL0910_Elect_Proc+0x554>)
 80012c0:	8812      	ldrh	r2, [r2, #0]
 80012c2:	4413      	add	r3, r2
 80012c4:	607b      	str	r3, [r7, #4]
	Energy_Cal(tmp_D.B32);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f975 	bl	80015b8 <Energy_Cal>
	BL0910_Elect.Energy_1+=Eng_Cal.Energy001;
 80012ce:	4b29      	ldr	r3, [pc, #164]	@ (8001374 <BL0910_Elect_Proc+0x54c>)
 80012d0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80012d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001380 <BL0910_Elect_Proc+0x558>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	b29a      	uxth	r2, r3
 80012da:	4b26      	ldr	r3, [pc, #152]	@ (8001374 <BL0910_Elect_Proc+0x54c>)
 80012dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
	Eng_CFCnt.Cnt1=Eng_Cal.cnt_remainder;
 80012de:	4b28      	ldr	r3, [pc, #160]	@ (8001380 <BL0910_Elect_Proc+0x558>)
 80012e0:	885a      	ldrh	r2, [r3, #2]
 80012e2:	4b26      	ldr	r3, [pc, #152]	@ (800137c <BL0910_Elect_Proc+0x554>)
 80012e4:	801a      	strh	r2, [r3, #0]
	BL0910_Read(Addr_CF2_CNT, &BL0910_Data);
 80012e6:	4920      	ldr	r1, [pc, #128]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 80012e8:	2030      	movs	r0, #48	@ 0x30
 80012ea:	f000 f9a4 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 80012ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32+=Eng_CFCnt.Cnt2;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a20      	ldr	r2, [pc, #128]	@ (800137c <BL0910_Elect_Proc+0x554>)
 80012fc:	8852      	ldrh	r2, [r2, #2]
 80012fe:	4413      	add	r3, r2
 8001300:	607b      	str	r3, [r7, #4]
	Energy_Cal(tmp_D.B32);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f957 	bl	80015b8 <Energy_Cal>
	BL0910_Elect.Energy_2+=Eng_Cal.Energy001;
 800130a:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <BL0910_Elect_Proc+0x54c>)
 800130c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800130e:	4b1c      	ldr	r3, [pc, #112]	@ (8001380 <BL0910_Elect_Proc+0x558>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	b29a      	uxth	r2, r3
 8001316:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <BL0910_Elect_Proc+0x54c>)
 8001318:	859a      	strh	r2, [r3, #44]	@ 0x2c
	Eng_CFCnt.Cnt2=Eng_Cal.cnt_remainder;
 800131a:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <BL0910_Elect_Proc+0x558>)
 800131c:	885a      	ldrh	r2, [r3, #2]
 800131e:	4b17      	ldr	r3, [pc, #92]	@ (800137c <BL0910_Elect_Proc+0x554>)
 8001320:	805a      	strh	r2, [r3, #2]
	BL0910_Read(Addr_CF3_CNT, &BL0910_Data);
 8001322:	4911      	ldr	r1, [pc, #68]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 8001324:	2031      	movs	r0, #49	@ 0x31
 8001326:	f000 f986 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 800132a:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 8001330:	2300      	movs	r3, #0
 8001332:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32+=Eng_CFCnt.Cnt3;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a11      	ldr	r2, [pc, #68]	@ (800137c <BL0910_Elect_Proc+0x554>)
 8001338:	8892      	ldrh	r2, [r2, #4]
 800133a:	4413      	add	r3, r2
 800133c:	607b      	str	r3, [r7, #4]
	Energy_Cal(tmp_D.B32);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4618      	mov	r0, r3
 8001342:	f000 f939 	bl	80015b8 <Energy_Cal>
	BL0910_Elect.Energy_3+=Eng_Cal.Energy001;
 8001346:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <BL0910_Elect_Proc+0x54c>)
 8001348:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 800134a:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <BL0910_Elect_Proc+0x558>)
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	b29a      	uxth	r2, r3
 8001352:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <BL0910_Elect_Proc+0x54c>)
 8001354:	85da      	strh	r2, [r3, #46]	@ 0x2e
	Eng_CFCnt.Cnt3=Eng_Cal.cnt_remainder;
 8001356:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <BL0910_Elect_Proc+0x558>)
 8001358:	885a      	ldrh	r2, [r3, #2]
 800135a:	4b08      	ldr	r3, [pc, #32]	@ (800137c <BL0910_Elect_Proc+0x554>)
 800135c:	809a      	strh	r2, [r3, #4]
	BL0910_Read(Addr_CF4_CNT, &BL0910_Data);
 800135e:	4902      	ldr	r1, [pc, #8]	@ (8001368 <BL0910_Elect_Proc+0x540>)
 8001360:	2032      	movs	r0, #50	@ 0x32
 8001362:	f000 f968 	bl	8001636 <BL0910_Read>
 8001366:	e00d      	b.n	8001384 <BL0910_Elect_Proc+0x55c>
 8001368:	2000009c 	.word	0x2000009c
 800136c:	007ffffe 	.word	0x007ffffe
 8001370:	99101527 	.word	0x99101527
 8001374:	20000054 	.word	0x20000054
 8001378:	3b9aca00 	.word	0x3b9aca00
 800137c:	2000003c 	.word	0x2000003c
 8001380:	20000038 	.word	0x20000038
	tmp_D.B32=BL0910_Data.B32;
 8001384:	4b87      	ldr	r3, [pc, #540]	@ (80015a4 <BL0910_Elect_Proc+0x77c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 800138a:	2300      	movs	r3, #0
 800138c:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32+=Eng_CFCnt.Cnt4;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a85      	ldr	r2, [pc, #532]	@ (80015a8 <BL0910_Elect_Proc+0x780>)
 8001392:	88d2      	ldrh	r2, [r2, #6]
 8001394:	4413      	add	r3, r2
 8001396:	607b      	str	r3, [r7, #4]
	Energy_Cal(tmp_D.B32);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f90c 	bl	80015b8 <Energy_Cal>
	BL0910_Elect.Energy_4+=Eng_Cal.Energy001;
 80013a0:	4b82      	ldr	r3, [pc, #520]	@ (80015ac <BL0910_Elect_Proc+0x784>)
 80013a2:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80013a4:	4b82      	ldr	r3, [pc, #520]	@ (80015b0 <BL0910_Elect_Proc+0x788>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	4413      	add	r3, r2
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	4b7f      	ldr	r3, [pc, #508]	@ (80015ac <BL0910_Elect_Proc+0x784>)
 80013ae:	861a      	strh	r2, [r3, #48]	@ 0x30
	Eng_CFCnt.Cnt4=Eng_Cal.cnt_remainder;
 80013b0:	4b7f      	ldr	r3, [pc, #508]	@ (80015b0 <BL0910_Elect_Proc+0x788>)
 80013b2:	885a      	ldrh	r2, [r3, #2]
 80013b4:	4b7c      	ldr	r3, [pc, #496]	@ (80015a8 <BL0910_Elect_Proc+0x780>)
 80013b6:	80da      	strh	r2, [r3, #6]
	BL0910_Read(Addr_CF5_CNT, &BL0910_Data);
 80013b8:	497a      	ldr	r1, [pc, #488]	@ (80015a4 <BL0910_Elect_Proc+0x77c>)
 80013ba:	2033      	movs	r0, #51	@ 0x33
 80013bc:	f000 f93b 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 80013c0:	4b78      	ldr	r3, [pc, #480]	@ (80015a4 <BL0910_Elect_Proc+0x77c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32+=Eng_CFCnt.Cnt5;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a76      	ldr	r2, [pc, #472]	@ (80015a8 <BL0910_Elect_Proc+0x780>)
 80013ce:	8912      	ldrh	r2, [r2, #8]
 80013d0:	4413      	add	r3, r2
 80013d2:	607b      	str	r3, [r7, #4]
	Energy_Cal(tmp_D.B32);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f8ee 	bl	80015b8 <Energy_Cal>
	BL0910_Elect.Energy_5+=Eng_Cal.Energy001;
 80013dc:	4b73      	ldr	r3, [pc, #460]	@ (80015ac <BL0910_Elect_Proc+0x784>)
 80013de:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80013e0:	4b73      	ldr	r3, [pc, #460]	@ (80015b0 <BL0910_Elect_Proc+0x788>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	4413      	add	r3, r2
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	4b70      	ldr	r3, [pc, #448]	@ (80015ac <BL0910_Elect_Proc+0x784>)
 80013ea:	865a      	strh	r2, [r3, #50]	@ 0x32
	Eng_CFCnt.Cnt5=Eng_Cal.cnt_remainder;
 80013ec:	4b70      	ldr	r3, [pc, #448]	@ (80015b0 <BL0910_Elect_Proc+0x788>)
 80013ee:	885a      	ldrh	r2, [r3, #2]
 80013f0:	4b6d      	ldr	r3, [pc, #436]	@ (80015a8 <BL0910_Elect_Proc+0x780>)
 80013f2:	811a      	strh	r2, [r3, #8]
	BL0910_Read(Addr_CF6_CNT, &BL0910_Data);
 80013f4:	496b      	ldr	r1, [pc, #428]	@ (80015a4 <BL0910_Elect_Proc+0x77c>)
 80013f6:	2034      	movs	r0, #52	@ 0x34
 80013f8:	f000 f91d 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 80013fc:	4b69      	ldr	r3, [pc, #420]	@ (80015a4 <BL0910_Elect_Proc+0x77c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 8001402:	2300      	movs	r3, #0
 8001404:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32+=Eng_CFCnt.Cnt6;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a67      	ldr	r2, [pc, #412]	@ (80015a8 <BL0910_Elect_Proc+0x780>)
 800140a:	8952      	ldrh	r2, [r2, #10]
 800140c:	4413      	add	r3, r2
 800140e:	607b      	str	r3, [r7, #4]
	Energy_Cal(tmp_D.B32);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f8d0 	bl	80015b8 <Energy_Cal>
	BL0910_Elect.Energy_6+=Eng_Cal.Energy001;
 8001418:	4b64      	ldr	r3, [pc, #400]	@ (80015ac <BL0910_Elect_Proc+0x784>)
 800141a:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 800141c:	4b64      	ldr	r3, [pc, #400]	@ (80015b0 <BL0910_Elect_Proc+0x788>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	4413      	add	r3, r2
 8001422:	b29a      	uxth	r2, r3
 8001424:	4b61      	ldr	r3, [pc, #388]	@ (80015ac <BL0910_Elect_Proc+0x784>)
 8001426:	869a      	strh	r2, [r3, #52]	@ 0x34
	Eng_CFCnt.Cnt6=Eng_Cal.cnt_remainder;
 8001428:	4b61      	ldr	r3, [pc, #388]	@ (80015b0 <BL0910_Elect_Proc+0x788>)
 800142a:	885a      	ldrh	r2, [r3, #2]
 800142c:	4b5e      	ldr	r3, [pc, #376]	@ (80015a8 <BL0910_Elect_Proc+0x780>)
 800142e:	815a      	strh	r2, [r3, #10]
	BL0910_Read(Addr_CF7_CNT, &BL0910_Data);
 8001430:	495c      	ldr	r1, [pc, #368]	@ (80015a4 <BL0910_Elect_Proc+0x77c>)
 8001432:	2035      	movs	r0, #53	@ 0x35
 8001434:	f000 f8ff 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 8001438:	4b5a      	ldr	r3, [pc, #360]	@ (80015a4 <BL0910_Elect_Proc+0x77c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 800143e:	2300      	movs	r3, #0
 8001440:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32+=Eng_CFCnt.Cnt7;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a58      	ldr	r2, [pc, #352]	@ (80015a8 <BL0910_Elect_Proc+0x780>)
 8001446:	8992      	ldrh	r2, [r2, #12]
 8001448:	4413      	add	r3, r2
 800144a:	607b      	str	r3, [r7, #4]
	Energy_Cal(tmp_D.B32);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f8b2 	bl	80015b8 <Energy_Cal>
	BL0910_Elect.Energy_7+=Eng_Cal.Energy001;
 8001454:	4b55      	ldr	r3, [pc, #340]	@ (80015ac <BL0910_Elect_Proc+0x784>)
 8001456:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8001458:	4b55      	ldr	r3, [pc, #340]	@ (80015b0 <BL0910_Elect_Proc+0x788>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	4413      	add	r3, r2
 800145e:	b29a      	uxth	r2, r3
 8001460:	4b52      	ldr	r3, [pc, #328]	@ (80015ac <BL0910_Elect_Proc+0x784>)
 8001462:	86da      	strh	r2, [r3, #54]	@ 0x36
	Eng_CFCnt.Cnt7=Eng_Cal.cnt_remainder;
 8001464:	4b52      	ldr	r3, [pc, #328]	@ (80015b0 <BL0910_Elect_Proc+0x788>)
 8001466:	885a      	ldrh	r2, [r3, #2]
 8001468:	4b4f      	ldr	r3, [pc, #316]	@ (80015a8 <BL0910_Elect_Proc+0x780>)
 800146a:	819a      	strh	r2, [r3, #12]
	BL0910_Read(Addr_CF8_CNT, &BL0910_Data);
 800146c:	494d      	ldr	r1, [pc, #308]	@ (80015a4 <BL0910_Elect_Proc+0x77c>)
 800146e:	2036      	movs	r0, #54	@ 0x36
 8001470:	f000 f8e1 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 8001474:	4b4b      	ldr	r3, [pc, #300]	@ (80015a4 <BL0910_Elect_Proc+0x77c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 800147a:	2300      	movs	r3, #0
 800147c:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32+=Eng_CFCnt.Cnt8;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a49      	ldr	r2, [pc, #292]	@ (80015a8 <BL0910_Elect_Proc+0x780>)
 8001482:	89d2      	ldrh	r2, [r2, #14]
 8001484:	4413      	add	r3, r2
 8001486:	607b      	str	r3, [r7, #4]
	Energy_Cal(tmp_D.B32);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f894 	bl	80015b8 <Energy_Cal>
	BL0910_Elect.Energy_8+=Eng_Cal.Energy001;
 8001490:	4b46      	ldr	r3, [pc, #280]	@ (80015ac <BL0910_Elect_Proc+0x784>)
 8001492:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8001494:	4b46      	ldr	r3, [pc, #280]	@ (80015b0 <BL0910_Elect_Proc+0x788>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	4413      	add	r3, r2
 800149a:	b29a      	uxth	r2, r3
 800149c:	4b43      	ldr	r3, [pc, #268]	@ (80015ac <BL0910_Elect_Proc+0x784>)
 800149e:	871a      	strh	r2, [r3, #56]	@ 0x38
	Eng_CFCnt.Cnt8=Eng_Cal.cnt_remainder;
 80014a0:	4b43      	ldr	r3, [pc, #268]	@ (80015b0 <BL0910_Elect_Proc+0x788>)
 80014a2:	885a      	ldrh	r2, [r3, #2]
 80014a4:	4b40      	ldr	r3, [pc, #256]	@ (80015a8 <BL0910_Elect_Proc+0x780>)
 80014a6:	81da      	strh	r2, [r3, #14]
	BL0910_Read(Addr_CF9_CNT, &BL0910_Data);
 80014a8:	493e      	ldr	r1, [pc, #248]	@ (80015a4 <BL0910_Elect_Proc+0x77c>)
 80014aa:	2037      	movs	r0, #55	@ 0x37
 80014ac:	f000 f8c3 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 80014b0:	4b3c      	ldr	r3, [pc, #240]	@ (80015a4 <BL0910_Elect_Proc+0x77c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32+=Eng_CFCnt.Cnt9;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a3a      	ldr	r2, [pc, #232]	@ (80015a8 <BL0910_Elect_Proc+0x780>)
 80014be:	8a12      	ldrh	r2, [r2, #16]
 80014c0:	4413      	add	r3, r2
 80014c2:	607b      	str	r3, [r7, #4]
	Energy_Cal(tmp_D.B32);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f876 	bl	80015b8 <Energy_Cal>
	BL0910_Elect.Energy_9+=Eng_Cal.Energy001;
 80014cc:	4b37      	ldr	r3, [pc, #220]	@ (80015ac <BL0910_Elect_Proc+0x784>)
 80014ce:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 80014d0:	4b37      	ldr	r3, [pc, #220]	@ (80015b0 <BL0910_Elect_Proc+0x788>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	4413      	add	r3, r2
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b34      	ldr	r3, [pc, #208]	@ (80015ac <BL0910_Elect_Proc+0x784>)
 80014da:	875a      	strh	r2, [r3, #58]	@ 0x3a
	Eng_CFCnt.Cnt9=Eng_Cal.cnt_remainder;
 80014dc:	4b34      	ldr	r3, [pc, #208]	@ (80015b0 <BL0910_Elect_Proc+0x788>)
 80014de:	885a      	ldrh	r2, [r3, #2]
 80014e0:	4b31      	ldr	r3, [pc, #196]	@ (80015a8 <BL0910_Elect_Proc+0x780>)
 80014e2:	821a      	strh	r2, [r3, #16]
	BL0910_Read(Addr_CF10_CNT, &BL0910_Data);
 80014e4:	492f      	ldr	r1, [pc, #188]	@ (80015a4 <BL0910_Elect_Proc+0x77c>)
 80014e6:	2038      	movs	r0, #56	@ 0x38
 80014e8:	f000 f8a5 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 80014ec:	4b2d      	ldr	r3, [pc, #180]	@ (80015a4 <BL0910_Elect_Proc+0x77c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32+=Eng_CFCnt.Cnt10;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a2b      	ldr	r2, [pc, #172]	@ (80015a8 <BL0910_Elect_Proc+0x780>)
 80014fa:	8a52      	ldrh	r2, [r2, #18]
 80014fc:	4413      	add	r3, r2
 80014fe:	607b      	str	r3, [r7, #4]
	Energy_Cal(tmp_D.B32);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4618      	mov	r0, r3
 8001504:	f000 f858 	bl	80015b8 <Energy_Cal>
	BL0910_Elect.Energy_10+=Eng_Cal.Energy001;
 8001508:	4b28      	ldr	r3, [pc, #160]	@ (80015ac <BL0910_Elect_Proc+0x784>)
 800150a:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 800150c:	4b28      	ldr	r3, [pc, #160]	@ (80015b0 <BL0910_Elect_Proc+0x788>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	4413      	add	r3, r2
 8001512:	b29a      	uxth	r2, r3
 8001514:	4b25      	ldr	r3, [pc, #148]	@ (80015ac <BL0910_Elect_Proc+0x784>)
 8001516:	879a      	strh	r2, [r3, #60]	@ 0x3c
	Eng_CFCnt.Cnt10=Eng_Cal.cnt_remainder;
 8001518:	4b25      	ldr	r3, [pc, #148]	@ (80015b0 <BL0910_Elect_Proc+0x788>)
 800151a:	885a      	ldrh	r2, [r3, #2]
 800151c:	4b22      	ldr	r3, [pc, #136]	@ (80015a8 <BL0910_Elect_Proc+0x780>)
 800151e:	825a      	strh	r2, [r3, #18]
	// ܵ
	BL0910_Read(Addr_CF_CNT, &BL0910_Data);
 8001520:	4920      	ldr	r1, [pc, #128]	@ (80015a4 <BL0910_Elect_Proc+0x77c>)
 8001522:	2039      	movs	r0, #57	@ 0x39
 8001524:	f000 f887 	bl	8001636 <BL0910_Read>
	tmp_D.B32=BL0910_Data.B32;
 8001528:	4b1e      	ldr	r3, [pc, #120]	@ (80015a4 <BL0910_Elect_Proc+0x77c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	607b      	str	r3, [r7, #4]
	tmp_D.B8[3]=0;
 800152e:	2300      	movs	r3, #0
 8001530:	71fb      	strb	r3, [r7, #7]
	tmp_D.B32+=Eng_CFCnt.Cnt_Sum;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a1c      	ldr	r2, [pc, #112]	@ (80015a8 <BL0910_Elect_Proc+0x780>)
 8001536:	8a92      	ldrh	r2, [r2, #20]
 8001538:	4413      	add	r3, r2
 800153a:	607b      	str	r3, [r7, #4]
	if(tmp_D.B32>=Energy_Sum_K)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f5b3 7f0c 	cmp.w	r3, #560	@ 0x230
 8001542:	d317      	bcc.n	8001574 <BL0910_Elect_Proc+0x74c>
		{
			Eng_Cal.Energy001=tmp_D.B32/Energy_Sum_K;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	4a1a      	ldr	r2, [pc, #104]	@ (80015b4 <BL0910_Elect_Proc+0x78c>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	085b      	lsrs	r3, r3, #1
 8001550:	b29a      	uxth	r2, r3
 8001552:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <BL0910_Elect_Proc+0x788>)
 8001554:	801a      	strh	r2, [r3, #0]
			Eng_Cal.cnt_remainder=tmp_D.B32%Energy_Sum_K;
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	0913      	lsrs	r3, r2, #4
 800155a:	4916      	ldr	r1, [pc, #88]	@ (80015b4 <BL0910_Elect_Proc+0x78c>)
 800155c:	fba1 1303 	umull	r1, r3, r1, r3
 8001560:	085b      	lsrs	r3, r3, #1
 8001562:	f44f 710c 	mov.w	r1, #560	@ 0x230
 8001566:	fb01 f303 	mul.w	r3, r1, r3
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	b29a      	uxth	r2, r3
 800156e:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <BL0910_Elect_Proc+0x788>)
 8001570:	805a      	strh	r2, [r3, #2]
 8001572:	e006      	b.n	8001582 <BL0910_Elect_Proc+0x75a>
		}
	else
		{
			Eng_Cal.Energy001=0;
 8001574:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <BL0910_Elect_Proc+0x788>)
 8001576:	2200      	movs	r2, #0
 8001578:	801a      	strh	r2, [r3, #0]
			Eng_Cal.cnt_remainder=tmp_D.B32;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	b29a      	uxth	r2, r3
 800157e:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <BL0910_Elect_Proc+0x788>)
 8001580:	805a      	strh	r2, [r3, #2]
		}
	BL0910_Elect.Energy_Sum+=Eng_Cal.Energy001;
 8001582:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <BL0910_Elect_Proc+0x784>)
 8001584:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8001586:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <BL0910_Elect_Proc+0x788>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	b29a      	uxth	r2, r3
 800158e:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <BL0910_Elect_Proc+0x784>)
 8001590:	87da      	strh	r2, [r3, #62]	@ 0x3e
	Eng_CFCnt.Cnt_Sum=Eng_Cal.cnt_remainder;
 8001592:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <BL0910_Elect_Proc+0x788>)
 8001594:	885a      	ldrh	r2, [r3, #2]
 8001596:	4b04      	ldr	r3, [pc, #16]	@ (80015a8 <BL0910_Elect_Proc+0x780>)
 8001598:	829a      	strh	r2, [r3, #20]

}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000009c 	.word	0x2000009c
 80015a8:	2000003c 	.word	0x2000003c
 80015ac:	20000054 	.word	0x20000054
 80015b0:	20000038 	.word	0x20000038
 80015b4:	0ea0ea0f 	.word	0x0ea0ea0f

080015b8 <Energy_Cal>:
void Energy_Cal(uint32_t Cnt){
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	if (Cnt>=Energy_K)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f242 320b 	movw	r2, #8971	@ 0x230b
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d915      	bls.n	80015f6 <Energy_Cal+0x3e>
		{
			Eng_Cal.Energy001 = Cnt / Energy_K;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a10      	ldr	r2, [pc, #64]	@ (8001610 <Energy_Cal+0x58>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	0b5b      	lsrs	r3, r3, #13
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <Energy_Cal+0x5c>)
 80015d8:	801a      	strh	r2, [r3, #0]
			Eng_Cal.cnt_remainder = Cnt % Energy_K;
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <Energy_Cal+0x58>)
 80015de:	fba3 1302 	umull	r1, r3, r3, r2
 80015e2:	0b5b      	lsrs	r3, r3, #13
 80015e4:	f242 310c 	movw	r1, #8972	@ 0x230c
 80015e8:	fb01 f303 	mul.w	r3, r1, r3
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <Energy_Cal+0x5c>)
 80015f2:	805a      	strh	r2, [r3, #2]
	else
		{
			Eng_Cal.Energy001 = 0;
			Eng_Cal.cnt_remainder = Cnt;
		}
}
 80015f4:	e006      	b.n	8001604 <Energy_Cal+0x4c>
			Eng_Cal.Energy001 = 0;
 80015f6:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <Energy_Cal+0x5c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	801a      	strh	r2, [r3, #0]
			Eng_Cal.cnt_remainder = Cnt;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <Energy_Cal+0x5c>)
 8001602:	805a      	strh	r2, [r3, #2]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e9be7cdd 	.word	0xe9be7cdd
 8001614:	20000038 	.word	0x20000038

08001618 <BL0910_Write>:
void BL0910_Write(uint8_t REG_Addr,B32_B8_TypeDef *pData){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]

	BL0910_Uart_Write(REG_Addr , pData);
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	6839      	ldr	r1, [r7, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fb1f 	bl	8000c6c <BL0910_Uart_Write>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <BL0910_Read>:
void BL0910_Read(uint8_t REG_Addr,B32_B8_TypeDef *pData){
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	6039      	str	r1, [r7, #0]
 8001640:	71fb      	strb	r3, [r7, #7]

	BL0910_Uart_Read(REG_Addr , pData);
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	6839      	ldr	r1, [r7, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fb42 	bl	8000cd0 <BL0910_Uart_Read>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <stateRELAY>:
	if (mode5 == 1) {
		 rx_relay1 = 'I';
	}
}*/

void stateRELAY(void){
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800165e:	489e      	ldr	r0, [pc, #632]	@ (80018d8 <stateRELAY+0x284>)
 8001660:	f000 fff4 	bl	800264c <HAL_GPIO_WritePin>
	//HAL_Delay(50);
	// RL 1
	if ( rx_relay == 'A' ){
 8001664:	4b9d      	ldr	r3, [pc, #628]	@ (80018dc <stateRELAY+0x288>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b41      	cmp	r3, #65	@ 0x41
 800166a:	d11d      	bne.n	80016a8 <stateRELAY+0x54>
		 	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 1);
 800166c:	2201      	movs	r2, #1
 800166e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001672:	4899      	ldr	r0, [pc, #612]	@ (80018d8 <stateRELAY+0x284>)
 8001674:	f000 ffea 	bl	800264c <HAL_GPIO_WritePin>
			HAL_Delay(50);
 8001678:	2032      	movs	r0, #50	@ 0x32
 800167a:	f000 fc83 	bl	8001f84 <HAL_Delay>
		 	HAL_GPIO_WritePin(RL1_GPIO_Port, RL1_Pin, 1);
 800167e:	2201      	movs	r2, #1
 8001680:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001684:	4894      	ldr	r0, [pc, #592]	@ (80018d8 <stateRELAY+0x284>)
 8001686:	f000 ffe1 	bl	800264c <HAL_GPIO_WritePin>
		 	HAL_Delay(50);
 800168a:	2032      	movs	r0, #50	@ 0x32
 800168c:	f000 fc7a 	bl	8001f84 <HAL_Delay>
		 	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001696:	4890      	ldr	r0, [pc, #576]	@ (80018d8 <stateRELAY+0x284>)
 8001698:	f000 ffd8 	bl	800264c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin,1);
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016a2:	488f      	ldr	r0, [pc, #572]	@ (80018e0 <stateRELAY+0x28c>)
 80016a4:	f000 ffd2 	bl	800264c <HAL_GPIO_WritePin>
	}
	if ( rx_relay == 'B' ){
 80016a8:	4b8c      	ldr	r3, [pc, #560]	@ (80018dc <stateRELAY+0x288>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b42      	cmp	r3, #66	@ 0x42
 80016ae:	d11d      	bne.n	80016ec <stateRELAY+0x98>
			 	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 1);
 80016b0:	2201      	movs	r2, #1
 80016b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016b6:	4888      	ldr	r0, [pc, #544]	@ (80018d8 <stateRELAY+0x284>)
 80016b8:	f000 ffc8 	bl	800264c <HAL_GPIO_WritePin>
				HAL_Delay(50);
 80016bc:	2032      	movs	r0, #50	@ 0x32
 80016be:	f000 fc61 	bl	8001f84 <HAL_Delay>
			 	HAL_GPIO_WritePin(RL1_GPIO_Port, RL1_Pin, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016c8:	4883      	ldr	r0, [pc, #524]	@ (80018d8 <stateRELAY+0x284>)
 80016ca:	f000 ffbf 	bl	800264c <HAL_GPIO_WritePin>
			 	HAL_Delay(50);
 80016ce:	2032      	movs	r0, #50	@ 0x32
 80016d0:	f000 fc58 	bl	8001f84 <HAL_Delay>
			 	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016da:	487f      	ldr	r0, [pc, #508]	@ (80018d8 <stateRELAY+0x284>)
 80016dc:	f000 ffb6 	bl	800264c <HAL_GPIO_WritePin>
		        HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin,0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016e6:	487e      	ldr	r0, [pc, #504]	@ (80018e0 <stateRELAY+0x28c>)
 80016e8:	f000 ffb0 	bl	800264c <HAL_GPIO_WritePin>
    }

	// RL 2
	if ( rx_relay == 'C' ){
 80016ec:	4b7b      	ldr	r3, [pc, #492]	@ (80018dc <stateRELAY+0x288>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b43      	cmp	r3, #67	@ 0x43
 80016f2:	d11d      	bne.n	8001730 <stateRELAY+0xdc>
		 	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 1);
 80016f4:	2201      	movs	r2, #1
 80016f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016fa:	4877      	ldr	r0, [pc, #476]	@ (80018d8 <stateRELAY+0x284>)
 80016fc:	f000 ffa6 	bl	800264c <HAL_GPIO_WritePin>
			HAL_Delay(50);
 8001700:	2032      	movs	r0, #50	@ 0x32
 8001702:	f000 fc3f 	bl	8001f84 <HAL_Delay>
		 	HAL_GPIO_WritePin(RL2_GPIO_Port, RL2_Pin, 1);
 8001706:	2201      	movs	r2, #1
 8001708:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800170c:	4872      	ldr	r0, [pc, #456]	@ (80018d8 <stateRELAY+0x284>)
 800170e:	f000 ff9d 	bl	800264c <HAL_GPIO_WritePin>
		 	HAL_Delay(50);
 8001712:	2032      	movs	r0, #50	@ 0x32
 8001714:	f000 fc36 	bl	8001f84 <HAL_Delay>
		 	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800171e:	486e      	ldr	r0, [pc, #440]	@ (80018d8 <stateRELAY+0x284>)
 8001720:	f000 ff94 	bl	800264c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin,1);
 8001724:	2201      	movs	r2, #1
 8001726:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800172a:	486d      	ldr	r0, [pc, #436]	@ (80018e0 <stateRELAY+0x28c>)
 800172c:	f000 ff8e 	bl	800264c <HAL_GPIO_WritePin>
	}
	if ( rx_relay == 'D' ){
 8001730:	4b6a      	ldr	r3, [pc, #424]	@ (80018dc <stateRELAY+0x288>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b44      	cmp	r3, #68	@ 0x44
 8001736:	d11d      	bne.n	8001774 <stateRELAY+0x120>
			 	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 1);
 8001738:	2201      	movs	r2, #1
 800173a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800173e:	4866      	ldr	r0, [pc, #408]	@ (80018d8 <stateRELAY+0x284>)
 8001740:	f000 ff84 	bl	800264c <HAL_GPIO_WritePin>
				HAL_Delay(50);
 8001744:	2032      	movs	r0, #50	@ 0x32
 8001746:	f000 fc1d 	bl	8001f84 <HAL_Delay>
			 	HAL_GPIO_WritePin(RL2_GPIO_Port, RL2_Pin, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001750:	4861      	ldr	r0, [pc, #388]	@ (80018d8 <stateRELAY+0x284>)
 8001752:	f000 ff7b 	bl	800264c <HAL_GPIO_WritePin>
			 	HAL_Delay(50);
 8001756:	2032      	movs	r0, #50	@ 0x32
 8001758:	f000 fc14 	bl	8001f84 <HAL_Delay>
			 	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 0);
 800175c:	2200      	movs	r2, #0
 800175e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001762:	485d      	ldr	r0, [pc, #372]	@ (80018d8 <stateRELAY+0x284>)
 8001764:	f000 ff72 	bl	800264c <HAL_GPIO_WritePin>
		        HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin,0);
 8001768:	2200      	movs	r2, #0
 800176a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800176e:	485c      	ldr	r0, [pc, #368]	@ (80018e0 <stateRELAY+0x28c>)
 8001770:	f000 ff6c 	bl	800264c <HAL_GPIO_WritePin>
    }
	// RL 3
	if ( rx_relay == 'E' ){
 8001774:	4b59      	ldr	r3, [pc, #356]	@ (80018dc <stateRELAY+0x288>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b45      	cmp	r3, #69	@ 0x45
 800177a:	d11c      	bne.n	80017b6 <stateRELAY+0x162>
		 	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 1);
 800177c:	2201      	movs	r2, #1
 800177e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001782:	4855      	ldr	r0, [pc, #340]	@ (80018d8 <stateRELAY+0x284>)
 8001784:	f000 ff62 	bl	800264c <HAL_GPIO_WritePin>
			HAL_Delay(50);
 8001788:	2032      	movs	r0, #50	@ 0x32
 800178a:	f000 fbfb 	bl	8001f84 <HAL_Delay>
		 	HAL_GPIO_WritePin(RL3_GPIO_Port, RL3_Pin, 1);
 800178e:	2201      	movs	r2, #1
 8001790:	2180      	movs	r1, #128	@ 0x80
 8001792:	4851      	ldr	r0, [pc, #324]	@ (80018d8 <stateRELAY+0x284>)
 8001794:	f000 ff5a 	bl	800264c <HAL_GPIO_WritePin>
		 	HAL_Delay(50);
 8001798:	2032      	movs	r0, #50	@ 0x32
 800179a:	f000 fbf3 	bl	8001f84 <HAL_Delay>
		 	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017a4:	484c      	ldr	r0, [pc, #304]	@ (80018d8 <stateRELAY+0x284>)
 80017a6:	f000 ff51 	bl	800264c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin,1);
 80017aa:	2201      	movs	r2, #1
 80017ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017b0:	484b      	ldr	r0, [pc, #300]	@ (80018e0 <stateRELAY+0x28c>)
 80017b2:	f000 ff4b 	bl	800264c <HAL_GPIO_WritePin>
	}
	if ( rx_relay == 'F' ){
 80017b6:	4b49      	ldr	r3, [pc, #292]	@ (80018dc <stateRELAY+0x288>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b46      	cmp	r3, #70	@ 0x46
 80017bc:	d11c      	bne.n	80017f8 <stateRELAY+0x1a4>
			 	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 1);
 80017be:	2201      	movs	r2, #1
 80017c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017c4:	4844      	ldr	r0, [pc, #272]	@ (80018d8 <stateRELAY+0x284>)
 80017c6:	f000 ff41 	bl	800264c <HAL_GPIO_WritePin>
				HAL_Delay(50);
 80017ca:	2032      	movs	r0, #50	@ 0x32
 80017cc:	f000 fbda 	bl	8001f84 <HAL_Delay>
			 	HAL_GPIO_WritePin(RL3_GPIO_Port, RL3_Pin, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2180      	movs	r1, #128	@ 0x80
 80017d4:	4840      	ldr	r0, [pc, #256]	@ (80018d8 <stateRELAY+0x284>)
 80017d6:	f000 ff39 	bl	800264c <HAL_GPIO_WritePin>
			 	HAL_Delay(50);
 80017da:	2032      	movs	r0, #50	@ 0x32
 80017dc:	f000 fbd2 	bl	8001f84 <HAL_Delay>
			 	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017e6:	483c      	ldr	r0, [pc, #240]	@ (80018d8 <stateRELAY+0x284>)
 80017e8:	f000 ff30 	bl	800264c <HAL_GPIO_WritePin>
		        HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin,0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017f2:	483b      	ldr	r0, [pc, #236]	@ (80018e0 <stateRELAY+0x28c>)
 80017f4:	f000 ff2a 	bl	800264c <HAL_GPIO_WritePin>
    }
	// RL 4
	if ( rx_relay == 'G' ){
 80017f8:	4b38      	ldr	r3, [pc, #224]	@ (80018dc <stateRELAY+0x288>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b47      	cmp	r3, #71	@ 0x47
 80017fe:	d116      	bne.n	800182e <stateRELAY+0x1da>
		 	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 1);
 8001800:	2201      	movs	r2, #1
 8001802:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001806:	4834      	ldr	r0, [pc, #208]	@ (80018d8 <stateRELAY+0x284>)
 8001808:	f000 ff20 	bl	800264c <HAL_GPIO_WritePin>
			HAL_Delay(50);
 800180c:	2032      	movs	r0, #50	@ 0x32
 800180e:	f000 fbb9 	bl	8001f84 <HAL_Delay>
		 	HAL_GPIO_WritePin(RL4_GPIO_Port, RL4_Pin, 1);
 8001812:	2201      	movs	r2, #1
 8001814:	2140      	movs	r1, #64	@ 0x40
 8001816:	4830      	ldr	r0, [pc, #192]	@ (80018d8 <stateRELAY+0x284>)
 8001818:	f000 ff18 	bl	800264c <HAL_GPIO_WritePin>
		 	HAL_Delay(50);
 800181c:	2032      	movs	r0, #50	@ 0x32
 800181e:	f000 fbb1 	bl	8001f84 <HAL_Delay>
		 	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001828:	482b      	ldr	r0, [pc, #172]	@ (80018d8 <stateRELAY+0x284>)
 800182a:	f000 ff0f 	bl	800264c <HAL_GPIO_WritePin>

	}
	if ( rx_relay == 'H' ){
 800182e:	4b2b      	ldr	r3, [pc, #172]	@ (80018dc <stateRELAY+0x288>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b48      	cmp	r3, #72	@ 0x48
 8001834:	d116      	bne.n	8001864 <stateRELAY+0x210>
			 	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 1);
 8001836:	2201      	movs	r2, #1
 8001838:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800183c:	4826      	ldr	r0, [pc, #152]	@ (80018d8 <stateRELAY+0x284>)
 800183e:	f000 ff05 	bl	800264c <HAL_GPIO_WritePin>
				HAL_Delay(50);
 8001842:	2032      	movs	r0, #50	@ 0x32
 8001844:	f000 fb9e 	bl	8001f84 <HAL_Delay>
			 	HAL_GPIO_WritePin(RL4_GPIO_Port, RL4_Pin, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	2140      	movs	r1, #64	@ 0x40
 800184c:	4822      	ldr	r0, [pc, #136]	@ (80018d8 <stateRELAY+0x284>)
 800184e:	f000 fefd 	bl	800264c <HAL_GPIO_WritePin>
			 	HAL_Delay(50);
 8001852:	2032      	movs	r0, #50	@ 0x32
 8001854:	f000 fb96 	bl	8001f84 <HAL_Delay>
			 	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800185e:	481e      	ldr	r0, [pc, #120]	@ (80018d8 <stateRELAY+0x284>)
 8001860:	f000 fef4 	bl	800264c <HAL_GPIO_WritePin>

    }
	// RL 5
		if ( rx_relay == 'I' ){
 8001864:	4b1d      	ldr	r3, [pc, #116]	@ (80018dc <stateRELAY+0x288>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b49      	cmp	r3, #73	@ 0x49
 800186a:	d117      	bne.n	800189c <stateRELAY+0x248>
			 	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 1);
 800186c:	2201      	movs	r2, #1
 800186e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001872:	4819      	ldr	r0, [pc, #100]	@ (80018d8 <stateRELAY+0x284>)
 8001874:	f000 feea 	bl	800264c <HAL_GPIO_WritePin>
				HAL_Delay(50);
 8001878:	2032      	movs	r0, #50	@ 0x32
 800187a:	f000 fb83 	bl	8001f84 <HAL_Delay>
			 	HAL_GPIO_WritePin(RL5_GPIO_Port, RL5_Pin, 1);
 800187e:	2201      	movs	r2, #1
 8001880:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001884:	4817      	ldr	r0, [pc, #92]	@ (80018e4 <stateRELAY+0x290>)
 8001886:	f000 fee1 	bl	800264c <HAL_GPIO_WritePin>
			 	HAL_Delay(50);
 800188a:	2032      	movs	r0, #50	@ 0x32
 800188c:	f000 fb7a 	bl	8001f84 <HAL_Delay>
			 	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 0);
 8001890:	2200      	movs	r2, #0
 8001892:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001896:	4810      	ldr	r0, [pc, #64]	@ (80018d8 <stateRELAY+0x284>)
 8001898:	f000 fed8 	bl	800264c <HAL_GPIO_WritePin>

		}
		if ( rx_relay == 'J' ){
 800189c:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <stateRELAY+0x288>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b4a      	cmp	r3, #74	@ 0x4a
 80018a2:	d117      	bne.n	80018d4 <stateRELAY+0x280>
				 	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 1);
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018aa:	480b      	ldr	r0, [pc, #44]	@ (80018d8 <stateRELAY+0x284>)
 80018ac:	f000 fece 	bl	800264c <HAL_GPIO_WritePin>
					HAL_Delay(50);
 80018b0:	2032      	movs	r0, #50	@ 0x32
 80018b2:	f000 fb67 	bl	8001f84 <HAL_Delay>
				 	HAL_GPIO_WritePin(RL5_GPIO_Port, RL5_Pin, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018bc:	4809      	ldr	r0, [pc, #36]	@ (80018e4 <stateRELAY+0x290>)
 80018be:	f000 fec5 	bl	800264c <HAL_GPIO_WritePin>
				 	HAL_Delay(50);
 80018c2:	2032      	movs	r0, #50	@ 0x32
 80018c4:	f000 fb5e 	bl	8001f84 <HAL_Delay>
				 	HAL_GPIO_WritePin(CON_CoilRL_GPIO_Port, CON_CoilRL_Pin, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018ce:	4802      	ldr	r0, [pc, #8]	@ (80018d8 <stateRELAY+0x284>)
 80018d0:	f000 febc 	bl	800264c <HAL_GPIO_WritePin>

	    }
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40020800 	.word	0x40020800
 80018dc:	2000013e 	.word	0x2000013e
 80018e0:	40020400 	.word	0x40020400
 80018e4:	40020000 	.word	0x40020000

080018e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ec:	b672      	cpsid	i
}
 80018ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <Error_Handler+0x8>

080018f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	4b13      	ldr	r3, [pc, #76]	@ (800194c <HAL_MspInit+0x58>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001902:	4a12      	ldr	r2, [pc, #72]	@ (800194c <HAL_MspInit+0x58>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001908:	6453      	str	r3, [r2, #68]	@ 0x44
 800190a:	4b10      	ldr	r3, [pc, #64]	@ (800194c <HAL_MspInit+0x58>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <HAL_MspInit+0x58>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	4a0b      	ldr	r2, [pc, #44]	@ (800194c <HAL_MspInit+0x58>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001924:	6413      	str	r3, [r2, #64]	@ 0x40
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <HAL_MspInit+0x58>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	2005      	movs	r0, #5
 8001938:	f000 fc23 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800193c:	2005      	movs	r0, #5
 800193e:	f000 fc3c 	bl	80021ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <NMI_Handler+0x4>

08001958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <HardFault_Handler+0x4>

08001960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <MemManage_Handler+0x4>

08001968 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <BusFault_Handler+0x4>

08001970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <UsageFault_Handler+0x4>

08001978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a6:	f000 facd 	bl	8001f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}

080019ae <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80019c0:	2008      	movs	r0, #8
 80019c2:	f000 fe77 	bl	80026b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}

080019ca <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80019ce:	2010      	movs	r0, #16
 80019d0:	f000 fe70 	bl	80026b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80019dc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80019e0:	f000 fe68 	bl	80026b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80019e4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80019e8:	f000 fe64 	bl	80026b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80019f4:	4802      	ldr	r0, [pc, #8]	@ (8001a00 <UART4_IRQHandler+0x10>)
 80019f6:	f001 ffe5 	bl	80039c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000188 	.word	0x20000188

08001a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <SystemInit+0x20>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a0e:	4a05      	ldr	r2, [pc, #20]	@ (8001a24 <SystemInit+0x20>)
 8001a10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2e:	f107 0308 	add.w	r3, r7, #8
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a44:	4b1d      	ldr	r3, [pc, #116]	@ (8001abc <MX_TIM2_Init+0x94>)
 8001a46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <MX_TIM2_Init+0x94>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a52:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <MX_TIM2_Init+0x94>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a58:	4b18      	ldr	r3, [pc, #96]	@ (8001abc <MX_TIM2_Init+0x94>)
 8001a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a60:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <MX_TIM2_Init+0x94>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a66:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <MX_TIM2_Init+0x94>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a6c:	4813      	ldr	r0, [pc, #76]	@ (8001abc <MX_TIM2_Init+0x94>)
 8001a6e:	f001 fb39 	bl	80030e4 <HAL_TIM_Base_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a78:	f7ff ff36 	bl	80018e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	4619      	mov	r1, r3
 8001a88:	480c      	ldr	r0, [pc, #48]	@ (8001abc <MX_TIM2_Init+0x94>)
 8001a8a:	f001 fb7a 	bl	8003182 <HAL_TIM_ConfigClockSource>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a94:	f7ff ff28 	bl	80018e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aa0:	463b      	mov	r3, r7
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4805      	ldr	r0, [pc, #20]	@ (8001abc <MX_TIM2_Init+0x94>)
 8001aa6:	f001 fd79 	bl	800359c <HAL_TIMEx_MasterConfigSynchronization>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ab0:	f7ff ff1a 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000140 	.word	0x20000140

08001ac0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ad0:	d10d      	bne.n	8001aee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <HAL_TIM_Base_MspInit+0x3c>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	4a08      	ldr	r2, [pc, #32]	@ (8001afc <HAL_TIM_Base_MspInit+0x3c>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_TIM_Base_MspInit+0x3c>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001aee:	bf00      	nop
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800

08001b00 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <MX_UART4_Init+0x4c>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	@ (8001b50 <MX_UART4_Init+0x50>)
 8001b08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001b0a:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <MX_UART4_Init+0x4c>)
 8001b0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b10:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <MX_UART4_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <MX_UART4_Init+0x4c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <MX_UART4_Init+0x4c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b24:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <MX_UART4_Init+0x4c>)
 8001b26:	220c      	movs	r2, #12
 8001b28:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2a:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <MX_UART4_Init+0x4c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <MX_UART4_Init+0x4c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b36:	4805      	ldr	r0, [pc, #20]	@ (8001b4c <MX_UART4_Init+0x4c>)
 8001b38:	f001 fdac 	bl	8003694 <HAL_UART_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001b42:	f7ff fed1 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000188 	.word	0x20000188
 8001b50:	40004c00 	.word	0x40004c00

08001b54 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b58:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <MX_USART1_UART_Init+0x4c>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ba4 <MX_USART1_UART_Init+0x50>)
 8001b5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 8001b5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ba0 <MX_USART1_UART_Init+0x4c>)
 8001b60:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001b64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <MX_USART1_UART_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <MX_USART1_UART_Init+0x4c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <MX_USART1_UART_Init+0x4c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b78:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <MX_USART1_UART_Init+0x4c>)
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <MX_USART1_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <MX_USART1_UART_Init+0x4c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	@ (8001ba0 <MX_USART1_UART_Init+0x4c>)
 8001b8c:	f001 fd82 	bl	8003694 <HAL_UART_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b96:	f7ff fea7 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200001d0 	.word	0x200001d0
 8001ba4:	40011000 	.word	0x40011000

08001ba8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bac:	4b11      	ldr	r3, [pc, #68]	@ (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bae:	4a12      	ldr	r2, [pc, #72]	@ (8001bf8 <MX_USART2_UART_Init+0x50>)
 8001bb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bb2:	4b10      	ldr	r3, [pc, #64]	@ (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bcc:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bce:	220c      	movs	r2, #12
 8001bd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd2:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bde:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001be0:	f001 fd58 	bl	8003694 <HAL_UART_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bea:	f7ff fe7d 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000218 	.word	0x20000218
 8001bf8:	40004400 	.word	0x40004400

08001bfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08e      	sub	sp, #56	@ 0x38
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a4f      	ldr	r2, [pc, #316]	@ (8001d58 <HAL_UART_MspInit+0x15c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d134      	bne.n	8001c88 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
 8001c22:	4b4e      	ldr	r3, [pc, #312]	@ (8001d5c <HAL_UART_MspInit+0x160>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	4a4d      	ldr	r2, [pc, #308]	@ (8001d5c <HAL_UART_MspInit+0x160>)
 8001c28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c2e:	4b4b      	ldr	r3, [pc, #300]	@ (8001d5c <HAL_UART_MspInit+0x160>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c36:	623b      	str	r3, [r7, #32]
 8001c38:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	4b47      	ldr	r3, [pc, #284]	@ (8001d5c <HAL_UART_MspInit+0x160>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	4a46      	ldr	r2, [pc, #280]	@ (8001d5c <HAL_UART_MspInit+0x160>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4a:	4b44      	ldr	r3, [pc, #272]	@ (8001d5c <HAL_UART_MspInit+0x160>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	61fb      	str	r3, [r7, #28]
 8001c54:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c56:	2303      	movs	r3, #3
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c66:	2308      	movs	r3, #8
 8001c68:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c6e:	4619      	mov	r1, r3
 8001c70:	483b      	ldr	r0, [pc, #236]	@ (8001d60 <HAL_UART_MspInit+0x164>)
 8001c72:	f000 fb4f 	bl	8002314 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2100      	movs	r1, #0
 8001c7a:	2034      	movs	r0, #52	@ 0x34
 8001c7c:	f000 fa81 	bl	8002182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c80:	2034      	movs	r0, #52	@ 0x34
 8001c82:	f000 fa9a 	bl	80021ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c86:	e062      	b.n	8001d4e <HAL_UART_MspInit+0x152>
  else if(uartHandle->Instance==USART1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a35      	ldr	r2, [pc, #212]	@ (8001d64 <HAL_UART_MspInit+0x168>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d12c      	bne.n	8001cec <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	4b31      	ldr	r3, [pc, #196]	@ (8001d5c <HAL_UART_MspInit+0x160>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	4a30      	ldr	r2, [pc, #192]	@ (8001d5c <HAL_UART_MspInit+0x160>)
 8001c9c:	f043 0310 	orr.w	r3, r3, #16
 8001ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ca2:	4b2e      	ldr	r3, [pc, #184]	@ (8001d5c <HAL_UART_MspInit+0x160>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	f003 0310 	and.w	r3, r3, #16
 8001caa:	61bb      	str	r3, [r7, #24]
 8001cac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d5c <HAL_UART_MspInit+0x160>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	4a29      	ldr	r2, [pc, #164]	@ (8001d5c <HAL_UART_MspInit+0x160>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cbe:	4b27      	ldr	r3, [pc, #156]	@ (8001d5c <HAL_UART_MspInit+0x160>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cca:	23c0      	movs	r3, #192	@ 0xc0
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cda:	2307      	movs	r3, #7
 8001cdc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4820      	ldr	r0, [pc, #128]	@ (8001d68 <HAL_UART_MspInit+0x16c>)
 8001ce6:	f000 fb15 	bl	8002314 <HAL_GPIO_Init>
}
 8001cea:	e030      	b.n	8001d4e <HAL_UART_MspInit+0x152>
  else if(uartHandle->Instance==USART2)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a1e      	ldr	r2, [pc, #120]	@ (8001d6c <HAL_UART_MspInit+0x170>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d12b      	bne.n	8001d4e <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	4b18      	ldr	r3, [pc, #96]	@ (8001d5c <HAL_UART_MspInit+0x160>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	4a17      	ldr	r2, [pc, #92]	@ (8001d5c <HAL_UART_MspInit+0x160>)
 8001d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d06:	4b15      	ldr	r3, [pc, #84]	@ (8001d5c <HAL_UART_MspInit+0x160>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <HAL_UART_MspInit+0x160>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	4a10      	ldr	r2, [pc, #64]	@ (8001d5c <HAL_UART_MspInit+0x160>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d22:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <HAL_UART_MspInit+0x160>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d2e:	230c      	movs	r3, #12
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d3e:	2307      	movs	r3, #7
 8001d40:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	@ (8001d60 <HAL_UART_MspInit+0x164>)
 8001d4a:	f000 fae3 	bl	8002314 <HAL_GPIO_Init>
}
 8001d4e:	bf00      	nop
 8001d50:	3738      	adds	r7, #56	@ 0x38
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40004c00 	.word	0x40004c00
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40020000 	.word	0x40020000
 8001d64:	40011000 	.word	0x40011000
 8001d68:	40020400 	.word	0x40020400
 8001d6c:	40004400 	.word	0x40004400

08001d70 <MX_USB_OTG_FS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_HCD_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d74:	4b0e      	ldr	r3, [pc, #56]	@ (8001db0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001d76:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001d7a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001db0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001d7e:	2208      	movs	r2, #8
 8001d80:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8001d82:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d88:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8001d8e:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001d90:	2202      	movs	r2, #2
 8001d92:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001d94:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8001d9a:	4805      	ldr	r0, [pc, #20]	@ (8001db0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001d9c:	f000 fca2 	bl	80026e4 <HAL_HCD_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8001da6:	f7ff fd9f 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000260 	.word	0x20000260

08001db4 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	@ 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dd4:	d132      	bne.n	8001e3c <HAL_HCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	4b1a      	ldr	r3, [pc, #104]	@ (8001e44 <HAL_HCD_MspInit+0x90>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	4a19      	ldr	r2, [pc, #100]	@ (8001e44 <HAL_HCD_MspInit+0x90>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de6:	4b17      	ldr	r3, [pc, #92]	@ (8001e44 <HAL_HCD_MspInit+0x90>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001df2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e00:	2303      	movs	r3, #3
 8001e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e04:	230a      	movs	r3, #10
 8001e06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	480e      	ldr	r0, [pc, #56]	@ (8001e48 <HAL_HCD_MspInit+0x94>)
 8001e10:	f000 fa80 	bl	8002314 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e14:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <HAL_HCD_MspInit+0x90>)
 8001e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e18:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <HAL_HCD_MspInit+0x90>)
 8001e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e1e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	4b07      	ldr	r3, [pc, #28]	@ (8001e44 <HAL_HCD_MspInit+0x90>)
 8001e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e28:	4a06      	ldr	r2, [pc, #24]	@ (8001e44 <HAL_HCD_MspInit+0x90>)
 8001e2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e2e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e30:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <HAL_HCD_MspInit+0x90>)
 8001e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	3728      	adds	r7, #40	@ 0x28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020000 	.word	0x40020000

08001e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e50:	480d      	ldr	r0, [pc, #52]	@ (8001e88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e52:	490e      	ldr	r1, [pc, #56]	@ (8001e8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e54:	4a0e      	ldr	r2, [pc, #56]	@ (8001e90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e58:	e002      	b.n	8001e60 <LoopCopyDataInit>

08001e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5e:	3304      	adds	r3, #4

08001e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e64:	d3f9      	bcc.n	8001e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e66:	4a0b      	ldr	r2, [pc, #44]	@ (8001e94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e68:	4c0b      	ldr	r4, [pc, #44]	@ (8001e98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e6c:	e001      	b.n	8001e72 <LoopFillZerobss>

08001e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e70:	3204      	adds	r2, #4

08001e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e74:	d3fb      	bcc.n	8001e6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e76:	f7ff fdc5 	bl	8001a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e7a:	f002 ff25 	bl	8004cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e7e:	f7fe fc0b 	bl	8000698 <main>
  bx  lr    
 8001e82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e8c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001e90:	08004d50 	.word	0x08004d50
  ldr r2, =_sbss
 8001e94:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001e98:	20000644 	.word	0x20000644

08001e9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e9c:	e7fe      	b.n	8001e9c <ADC_IRQHandler>
	...

08001ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <HAL_Init+0x40>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee0 <HAL_Init+0x40>)
 8001eaa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <HAL_Init+0x40>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee0 <HAL_Init+0x40>)
 8001eb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001eba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ebc:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a07      	ldr	r2, [pc, #28]	@ (8001ee0 <HAL_Init+0x40>)
 8001ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f000 f94f 	bl	800216c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ece:	200f      	movs	r0, #15
 8001ed0:	f000 f808 	bl	8001ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed4:	f7ff fd0e 	bl	80018f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023c00 	.word	0x40023c00

08001ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eec:	4b12      	ldr	r3, [pc, #72]	@ (8001f38 <HAL_InitTick+0x54>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <HAL_InitTick+0x58>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 f967 	bl	80021d6 <HAL_SYSTICK_Config>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00e      	b.n	8001f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b0f      	cmp	r3, #15
 8001f16:	d80a      	bhi.n	8001f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f000 f92f 	bl	8002182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f24:	4a06      	ldr	r2, [pc, #24]	@ (8001f40 <HAL_InitTick+0x5c>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000010 	.word	0x20000010
 8001f3c:	20000018 	.word	0x20000018
 8001f40:	20000014 	.word	0x20000014

08001f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f48:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <HAL_IncTick+0x20>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <HAL_IncTick+0x24>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	4a04      	ldr	r2, [pc, #16]	@ (8001f68 <HAL_IncTick+0x24>)
 8001f56:	6013      	str	r3, [r2, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000018 	.word	0x20000018
 8001f68:	20000640 	.word	0x20000640

08001f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f70:	4b03      	ldr	r3, [pc, #12]	@ (8001f80 <HAL_GetTick+0x14>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000640 	.word	0x20000640

08001f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f8c:	f7ff ffee 	bl	8001f6c <HAL_GetTick>
 8001f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9c:	d005      	beq.n	8001faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc8 <HAL_Delay+0x44>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001faa:	bf00      	nop
 8001fac:	f7ff ffde 	bl	8001f6c <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d8f7      	bhi.n	8001fac <HAL_Delay+0x28>
  {
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000018 	.word	0x20000018

08001fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffe:	4a04      	ldr	r2, [pc, #16]	@ (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	60d3      	str	r3, [r2, #12]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002018:	4b04      	ldr	r3, [pc, #16]	@ (800202c <__NVIC_GetPriorityGrouping+0x18>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	f003 0307 	and.w	r3, r3, #7
}
 8002022:	4618      	mov	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	2b00      	cmp	r3, #0
 8002040:	db0b      	blt.n	800205a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	f003 021f 	and.w	r2, r3, #31
 8002048:	4907      	ldr	r1, [pc, #28]	@ (8002068 <__NVIC_EnableIRQ+0x38>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	2001      	movs	r0, #1
 8002052:	fa00 f202 	lsl.w	r2, r0, r2
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000e100 	.word	0xe000e100

0800206c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	2b00      	cmp	r3, #0
 800207e:	db0a      	blt.n	8002096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	490c      	ldr	r1, [pc, #48]	@ (80020b8 <__NVIC_SetPriority+0x4c>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	0112      	lsls	r2, r2, #4
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	440b      	add	r3, r1
 8002090:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002094:	e00a      	b.n	80020ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4908      	ldr	r1, [pc, #32]	@ (80020bc <__NVIC_SetPriority+0x50>)
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	3b04      	subs	r3, #4
 80020a4:	0112      	lsls	r2, r2, #4
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	440b      	add	r3, r1
 80020aa:	761a      	strb	r2, [r3, #24]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000e100 	.word	0xe000e100
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	@ 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f1c3 0307 	rsb	r3, r3, #7
 80020da:	2b04      	cmp	r3, #4
 80020dc:	bf28      	it	cs
 80020de:	2304      	movcs	r3, #4
 80020e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3304      	adds	r3, #4
 80020e6:	2b06      	cmp	r3, #6
 80020e8:	d902      	bls.n	80020f0 <NVIC_EncodePriority+0x30>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3b03      	subs	r3, #3
 80020ee:	e000      	b.n	80020f2 <NVIC_EncodePriority+0x32>
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	f04f 32ff 	mov.w	r2, #4294967295
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43da      	mvns	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	401a      	ands	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002108:	f04f 31ff 	mov.w	r1, #4294967295
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	43d9      	mvns	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	4313      	orrs	r3, r2
         );
}
 800211a:	4618      	mov	r0, r3
 800211c:	3724      	adds	r7, #36	@ 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002138:	d301      	bcc.n	800213e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213a:	2301      	movs	r3, #1
 800213c:	e00f      	b.n	800215e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213e:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <SysTick_Config+0x40>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002146:	210f      	movs	r1, #15
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f7ff ff8e 	bl	800206c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002150:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <SysTick_Config+0x40>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002156:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <SysTick_Config+0x40>)
 8002158:	2207      	movs	r2, #7
 800215a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	e000e010 	.word	0xe000e010

0800216c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ff29 	bl	8001fcc <__NVIC_SetPriorityGrouping>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002182:	b580      	push	{r7, lr}
 8002184:	b086      	sub	sp, #24
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002194:	f7ff ff3e 	bl	8002014 <__NVIC_GetPriorityGrouping>
 8002198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f7ff ff8e 	bl	80020c0 <NVIC_EncodePriority>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff5d 	bl	800206c <__NVIC_SetPriority>
}
 80021b2:	bf00      	nop
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff31 	bl	8002030 <__NVIC_EnableIRQ>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff ffa2 	bl	8002128 <SysTick_Config>
 80021e4:	4603      	mov	r3, r0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b084      	sub	sp, #16
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021fc:	f7ff feb6 	bl	8001f6c <HAL_GetTick>
 8002200:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d008      	beq.n	8002220 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2280      	movs	r2, #128	@ 0x80
 8002212:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e052      	b.n	80022c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0216 	bic.w	r2, r2, #22
 800222e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800223e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	2b00      	cmp	r3, #0
 8002246:	d103      	bne.n	8002250 <HAL_DMA_Abort+0x62>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800224c:	2b00      	cmp	r3, #0
 800224e:	d007      	beq.n	8002260 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0208 	bic.w	r2, r2, #8
 800225e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0201 	bic.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002270:	e013      	b.n	800229a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002272:	f7ff fe7b 	bl	8001f6c <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b05      	cmp	r3, #5
 800227e:	d90c      	bls.n	800229a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2220      	movs	r2, #32
 8002284:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2203      	movs	r2, #3
 800228a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e015      	b.n	80022c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1e4      	bne.n	8002272 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ac:	223f      	movs	r2, #63	@ 0x3f
 80022ae:	409a      	lsls	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d004      	beq.n	80022ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2280      	movs	r2, #128	@ 0x80
 80022e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e00c      	b.n	8002306 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2205      	movs	r2, #5
 80022f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	@ 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	e16b      	b.n	8002608 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002330:	2201      	movs	r2, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	429a      	cmp	r2, r3
 800234a:	f040 815a 	bne.w	8002602 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d005      	beq.n	8002366 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002362:	2b02      	cmp	r3, #2
 8002364:	d130      	bne.n	80023c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	2203      	movs	r2, #3
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800239c:	2201      	movs	r2, #1
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	091b      	lsrs	r3, r3, #4
 80023b2:	f003 0201 	and.w	r2, r3, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d017      	beq.n	8002404 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d123      	bne.n	8002458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	08da      	lsrs	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3208      	adds	r2, #8
 8002418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	220f      	movs	r2, #15
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	08da      	lsrs	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3208      	adds	r2, #8
 8002452:	69b9      	ldr	r1, [r7, #24]
 8002454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	2203      	movs	r2, #3
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0203 	and.w	r2, r3, #3
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80b4 	beq.w	8002602 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b60      	ldr	r3, [pc, #384]	@ (8002620 <HAL_GPIO_Init+0x30c>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a2:	4a5f      	ldr	r2, [pc, #380]	@ (8002620 <HAL_GPIO_Init+0x30c>)
 80024a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002620 <HAL_GPIO_Init+0x30c>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024b6:	4a5b      	ldr	r2, [pc, #364]	@ (8002624 <HAL_GPIO_Init+0x310>)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	089b      	lsrs	r3, r3, #2
 80024bc:	3302      	adds	r3, #2
 80024be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	220f      	movs	r2, #15
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a52      	ldr	r2, [pc, #328]	@ (8002628 <HAL_GPIO_Init+0x314>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d02b      	beq.n	800253a <HAL_GPIO_Init+0x226>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a51      	ldr	r2, [pc, #324]	@ (800262c <HAL_GPIO_Init+0x318>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d025      	beq.n	8002536 <HAL_GPIO_Init+0x222>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a50      	ldr	r2, [pc, #320]	@ (8002630 <HAL_GPIO_Init+0x31c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d01f      	beq.n	8002532 <HAL_GPIO_Init+0x21e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002634 <HAL_GPIO_Init+0x320>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d019      	beq.n	800252e <HAL_GPIO_Init+0x21a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4e      	ldr	r2, [pc, #312]	@ (8002638 <HAL_GPIO_Init+0x324>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d013      	beq.n	800252a <HAL_GPIO_Init+0x216>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4d      	ldr	r2, [pc, #308]	@ (800263c <HAL_GPIO_Init+0x328>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00d      	beq.n	8002526 <HAL_GPIO_Init+0x212>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a4c      	ldr	r2, [pc, #304]	@ (8002640 <HAL_GPIO_Init+0x32c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d007      	beq.n	8002522 <HAL_GPIO_Init+0x20e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a4b      	ldr	r2, [pc, #300]	@ (8002644 <HAL_GPIO_Init+0x330>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <HAL_GPIO_Init+0x20a>
 800251a:	2307      	movs	r3, #7
 800251c:	e00e      	b.n	800253c <HAL_GPIO_Init+0x228>
 800251e:	2308      	movs	r3, #8
 8002520:	e00c      	b.n	800253c <HAL_GPIO_Init+0x228>
 8002522:	2306      	movs	r3, #6
 8002524:	e00a      	b.n	800253c <HAL_GPIO_Init+0x228>
 8002526:	2305      	movs	r3, #5
 8002528:	e008      	b.n	800253c <HAL_GPIO_Init+0x228>
 800252a:	2304      	movs	r3, #4
 800252c:	e006      	b.n	800253c <HAL_GPIO_Init+0x228>
 800252e:	2303      	movs	r3, #3
 8002530:	e004      	b.n	800253c <HAL_GPIO_Init+0x228>
 8002532:	2302      	movs	r3, #2
 8002534:	e002      	b.n	800253c <HAL_GPIO_Init+0x228>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_GPIO_Init+0x228>
 800253a:	2300      	movs	r3, #0
 800253c:	69fa      	ldr	r2, [r7, #28]
 800253e:	f002 0203 	and.w	r2, r2, #3
 8002542:	0092      	lsls	r2, r2, #2
 8002544:	4093      	lsls	r3, r2
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800254c:	4935      	ldr	r1, [pc, #212]	@ (8002624 <HAL_GPIO_Init+0x310>)
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	089b      	lsrs	r3, r3, #2
 8002552:	3302      	adds	r3, #2
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800255a:	4b3b      	ldr	r3, [pc, #236]	@ (8002648 <HAL_GPIO_Init+0x334>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800257e:	4a32      	ldr	r2, [pc, #200]	@ (8002648 <HAL_GPIO_Init+0x334>)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002584:	4b30      	ldr	r3, [pc, #192]	@ (8002648 <HAL_GPIO_Init+0x334>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025a8:	4a27      	ldr	r2, [pc, #156]	@ (8002648 <HAL_GPIO_Init+0x334>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ae:	4b26      	ldr	r3, [pc, #152]	@ (8002648 <HAL_GPIO_Init+0x334>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002648 <HAL_GPIO_Init+0x334>)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002648 <HAL_GPIO_Init+0x334>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025fc:	4a12      	ldr	r2, [pc, #72]	@ (8002648 <HAL_GPIO_Init+0x334>)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3301      	adds	r3, #1
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	2b0f      	cmp	r3, #15
 800260c:	f67f ae90 	bls.w	8002330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	3724      	adds	r7, #36	@ 0x24
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	40013800 	.word	0x40013800
 8002628:	40020000 	.word	0x40020000
 800262c:	40020400 	.word	0x40020400
 8002630:	40020800 	.word	0x40020800
 8002634:	40020c00 	.word	0x40020c00
 8002638:	40021000 	.word	0x40021000
 800263c:	40021400 	.word	0x40021400
 8002640:	40021800 	.word	0x40021800
 8002644:	40021c00 	.word	0x40021c00
 8002648:	40013c00 	.word	0x40013c00

0800264c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
 8002658:	4613      	mov	r3, r2
 800265a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800265c:	787b      	ldrb	r3, [r7, #1]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002668:	e003      	b.n	8002672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800266a:	887b      	ldrh	r3, [r7, #2]
 800266c:	041a      	lsls	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	619a      	str	r2, [r3, #24]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800267e:	b480      	push	{r7}
 8002680:	b085      	sub	sp, #20
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	460b      	mov	r3, r1
 8002688:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002690:	887a      	ldrh	r2, [r7, #2]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4013      	ands	r3, r2
 8002696:	041a      	lsls	r2, r3, #16
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	43d9      	mvns	r1, r3
 800269c:	887b      	ldrh	r3, [r7, #2]
 800269e:	400b      	ands	r3, r1
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	619a      	str	r2, [r3, #24]
}
 80026a6:	bf00      	nop
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026be:	4b08      	ldr	r3, [pc, #32]	@ (80026e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d006      	beq.n	80026d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ca:	4a05      	ldr	r2, [pc, #20]	@ (80026e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd ffd0 	bl	8000678 <HAL_GPIO_EXTI_Callback>
  }
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40013c00 	.word	0x40013c00

080026e4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e059      	b.n	80027aa <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d106      	bne.n	8002716 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff fb4f 	bl	8001db4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2203      	movs	r2, #3
 800271a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002724:	d102      	bne.n	800272c <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f002 f901 	bl	8004938 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	7c1a      	ldrb	r2, [r3, #16]
 800273e:	f88d 2000 	strb.w	r2, [sp]
 8002742:	3304      	adds	r3, #4
 8002744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002746:	f002 f893 	bl	8004870 <USB_CoreInit>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e026      	b.n	80027aa <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2101      	movs	r1, #1
 8002762:	4618      	mov	r0, r3
 8002764:	f002 f8f9 	bl	800495a <USB_SetCurrentMode>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2202      	movs	r2, #2
 8002772:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e017      	b.n	80027aa <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	7c1a      	ldrb	r2, [r3, #16]
 8002782:	f88d 2000 	strb.w	r2, [sp]
 8002786:	3304      	adds	r3, #4
 8002788:	cb0e      	ldmia	r3, {r1, r2, r3}
 800278a:	f002 f9d1 	bl	8004b30 <USB_HostInit>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e004      	b.n	80027aa <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e267      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d075      	beq.n	80028be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027d2:	4b88      	ldr	r3, [pc, #544]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d00c      	beq.n	80027f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027de:	4b85      	ldr	r3, [pc, #532]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d112      	bne.n	8002810 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ea:	4b82      	ldr	r3, [pc, #520]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027f6:	d10b      	bne.n	8002810 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f8:	4b7e      	ldr	r3, [pc, #504]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d05b      	beq.n	80028bc <HAL_RCC_OscConfig+0x108>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d157      	bne.n	80028bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e242      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002818:	d106      	bne.n	8002828 <HAL_RCC_OscConfig+0x74>
 800281a:	4b76      	ldr	r3, [pc, #472]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a75      	ldr	r2, [pc, #468]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	e01d      	b.n	8002864 <HAL_RCC_OscConfig+0xb0>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002830:	d10c      	bne.n	800284c <HAL_RCC_OscConfig+0x98>
 8002832:	4b70      	ldr	r3, [pc, #448]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a6f      	ldr	r2, [pc, #444]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002838:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	4b6d      	ldr	r3, [pc, #436]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a6c      	ldr	r2, [pc, #432]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e00b      	b.n	8002864 <HAL_RCC_OscConfig+0xb0>
 800284c:	4b69      	ldr	r3, [pc, #420]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a68      	ldr	r2, [pc, #416]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b66      	ldr	r3, [pc, #408]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a65      	ldr	r2, [pc, #404]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 800285e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d013      	beq.n	8002894 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7ff fb7e 	bl	8001f6c <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002874:	f7ff fb7a 	bl	8001f6c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	@ 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e207      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002886:	4b5b      	ldr	r3, [pc, #364]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0xc0>
 8002892:	e014      	b.n	80028be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7ff fb6a 	bl	8001f6c <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800289c:	f7ff fb66 	bl	8001f6c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	@ 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e1f3      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ae:	4b51      	ldr	r3, [pc, #324]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0xe8>
 80028ba:	e000      	b.n	80028be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d063      	beq.n	8002992 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ca:	4b4a      	ldr	r3, [pc, #296]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00b      	beq.n	80028ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d6:	4b47      	ldr	r3, [pc, #284]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d11c      	bne.n	800291c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e2:	4b44      	ldr	r3, [pc, #272]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d116      	bne.n	800291c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ee:	4b41      	ldr	r3, [pc, #260]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d005      	beq.n	8002906 <HAL_RCC_OscConfig+0x152>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d001      	beq.n	8002906 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e1c7      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002906:	4b3b      	ldr	r3, [pc, #236]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4937      	ldr	r1, [pc, #220]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291a:	e03a      	b.n	8002992 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002924:	4b34      	ldr	r3, [pc, #208]	@ (80029f8 <HAL_RCC_OscConfig+0x244>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292a:	f7ff fb1f 	bl	8001f6c <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002932:	f7ff fb1b 	bl	8001f6c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e1a8      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002944:	4b2b      	ldr	r3, [pc, #172]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002950:	4b28      	ldr	r3, [pc, #160]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4925      	ldr	r1, [pc, #148]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]
 8002964:	e015      	b.n	8002992 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002966:	4b24      	ldr	r3, [pc, #144]	@ (80029f8 <HAL_RCC_OscConfig+0x244>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7ff fafe 	bl	8001f6c <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002974:	f7ff fafa 	bl	8001f6c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e187      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002986:	4b1b      	ldr	r3, [pc, #108]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d036      	beq.n	8002a0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d016      	beq.n	80029d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a6:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <HAL_RCC_OscConfig+0x248>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ac:	f7ff fade 	bl	8001f6c <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b4:	f7ff fada 	bl	8001f6c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e167      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c6:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <HAL_RCC_OscConfig+0x240>)
 80029c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x200>
 80029d2:	e01b      	b.n	8002a0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d4:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <HAL_RCC_OscConfig+0x248>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029da:	f7ff fac7 	bl	8001f6c <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e0:	e00e      	b.n	8002a00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e2:	f7ff fac3 	bl	8001f6c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d907      	bls.n	8002a00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e150      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
 80029f4:	40023800 	.word	0x40023800
 80029f8:	42470000 	.word	0x42470000
 80029fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a00:	4b88      	ldr	r3, [pc, #544]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1ea      	bne.n	80029e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 8097 	beq.w	8002b48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1e:	4b81      	ldr	r3, [pc, #516]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10f      	bne.n	8002a4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	4a7c      	ldr	r2, [pc, #496]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a3a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a46:	2301      	movs	r3, #1
 8002a48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4a:	4b77      	ldr	r3, [pc, #476]	@ (8002c28 <HAL_RCC_OscConfig+0x474>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d118      	bne.n	8002a88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a56:	4b74      	ldr	r3, [pc, #464]	@ (8002c28 <HAL_RCC_OscConfig+0x474>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a73      	ldr	r2, [pc, #460]	@ (8002c28 <HAL_RCC_OscConfig+0x474>)
 8002a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a62:	f7ff fa83 	bl	8001f6c <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6a:	f7ff fa7f 	bl	8001f6c <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e10c      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7c:	4b6a      	ldr	r3, [pc, #424]	@ (8002c28 <HAL_RCC_OscConfig+0x474>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d106      	bne.n	8002a9e <HAL_RCC_OscConfig+0x2ea>
 8002a90:	4b64      	ldr	r3, [pc, #400]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a94:	4a63      	ldr	r2, [pc, #396]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a9c:	e01c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x324>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b05      	cmp	r3, #5
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x30c>
 8002aa6:	4b5f      	ldr	r3, [pc, #380]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aaa:	4a5e      	ldr	r2, [pc, #376]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab2:	4b5c      	ldr	r3, [pc, #368]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab6:	4a5b      	ldr	r2, [pc, #364]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0x324>
 8002ac0:	4b58      	ldr	r3, [pc, #352]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac4:	4a57      	ldr	r2, [pc, #348]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002acc:	4b55      	ldr	r3, [pc, #340]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad0:	4a54      	ldr	r2, [pc, #336]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	f023 0304 	bic.w	r3, r3, #4
 8002ad6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d015      	beq.n	8002b0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae0:	f7ff fa44 	bl	8001f6c <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ae8:	f7ff fa40 	bl	8001f6c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e0cb      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afe:	4b49      	ldr	r3, [pc, #292]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0ee      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x334>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0c:	f7ff fa2e 	bl	8001f6c <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b14:	f7ff fa2a 	bl	8001f6c <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e0b5      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1ee      	bne.n	8002b14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b36:	7dfb      	ldrb	r3, [r7, #23]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3c:	4b39      	ldr	r3, [pc, #228]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b40:	4a38      	ldr	r2, [pc, #224]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80a1 	beq.w	8002c94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b52:	4b34      	ldr	r3, [pc, #208]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d05c      	beq.n	8002c18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d141      	bne.n	8002bea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b66:	4b31      	ldr	r3, [pc, #196]	@ (8002c2c <HAL_RCC_OscConfig+0x478>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7ff f9fe 	bl	8001f6c <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b74:	f7ff f9fa 	bl	8001f6c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e087      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b86:	4b27      	ldr	r3, [pc, #156]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69da      	ldr	r2, [r3, #28]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	019b      	lsls	r3, r3, #6
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba8:	085b      	lsrs	r3, r3, #1
 8002baa:	3b01      	subs	r3, #1
 8002bac:	041b      	lsls	r3, r3, #16
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb4:	061b      	lsls	r3, r3, #24
 8002bb6:	491b      	ldr	r1, [pc, #108]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c2c <HAL_RCC_OscConfig+0x478>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc2:	f7ff f9d3 	bl	8001f6c <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bca:	f7ff f9cf 	bl	8001f6c <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e05c      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bdc:	4b11      	ldr	r3, [pc, #68]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x416>
 8002be8:	e054      	b.n	8002c94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bea:	4b10      	ldr	r3, [pc, #64]	@ (8002c2c <HAL_RCC_OscConfig+0x478>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7ff f9bc 	bl	8001f6c <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf8:	f7ff f9b8 	bl	8001f6c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e045      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0a:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x444>
 8002c16:	e03d      	b.n	8002c94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e038      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40007000 	.word	0x40007000
 8002c2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca0 <HAL_RCC_OscConfig+0x4ec>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d028      	beq.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d121      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d11a      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c60:	4013      	ands	r3, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d111      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c76:	085b      	lsrs	r3, r3, #1
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d107      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800

08002ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0cc      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b68      	ldr	r3, [pc, #416]	@ (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d90c      	bls.n	8002ce0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b65      	ldr	r3, [pc, #404]	@ (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b63      	ldr	r3, [pc, #396]	@ (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0b8      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d020      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf8:	4b59      	ldr	r3, [pc, #356]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4a58      	ldr	r2, [pc, #352]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d10:	4b53      	ldr	r3, [pc, #332]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	4a52      	ldr	r2, [pc, #328]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1c:	4b50      	ldr	r3, [pc, #320]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	494d      	ldr	r1, [pc, #308]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d044      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	4b47      	ldr	r3, [pc, #284]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d119      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e07f      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d003      	beq.n	8002d62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d62:	4b3f      	ldr	r3, [pc, #252]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e06f      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d72:	4b3b      	ldr	r3, [pc, #236]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e067      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d82:	4b37      	ldr	r3, [pc, #220]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f023 0203 	bic.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4934      	ldr	r1, [pc, #208]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d94:	f7ff f8ea 	bl	8001f6c <HAL_GetTick>
 8002d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9c:	f7ff f8e6 	bl	8001f6c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e04f      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 020c 	and.w	r2, r3, #12
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d1eb      	bne.n	8002d9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc4:	4b25      	ldr	r3, [pc, #148]	@ (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d20c      	bcs.n	8002dec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd2:	4b22      	ldr	r3, [pc, #136]	@ (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	4b20      	ldr	r3, [pc, #128]	@ (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e032      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df8:	4b19      	ldr	r3, [pc, #100]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4916      	ldr	r1, [pc, #88]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e16:	4b12      	ldr	r3, [pc, #72]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	490e      	ldr	r1, [pc, #56]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e2a:	f000 f821 	bl	8002e70 <HAL_RCC_GetSysClockFreq>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	490a      	ldr	r1, [pc, #40]	@ (8002e64 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	5ccb      	ldrb	r3, [r1, r3]
 8002e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e42:	4a09      	ldr	r2, [pc, #36]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e46:	4b09      	ldr	r3, [pc, #36]	@ (8002e6c <HAL_RCC_ClockConfig+0x1c8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff f84a 	bl	8001ee4 <HAL_InitTick>

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40023c00 	.word	0x40023c00
 8002e60:	40023800 	.word	0x40023800
 8002e64:	08004d28 	.word	0x08004d28
 8002e68:	20000010 	.word	0x20000010
 8002e6c:	20000014 	.word	0x20000014

08002e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e74:	b094      	sub	sp, #80	@ 0x50
 8002e76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e80:	2300      	movs	r3, #0
 8002e82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e88:	4b79      	ldr	r3, [pc, #484]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d00d      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x40>
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	f200 80e1 	bhi.w	800305c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d003      	beq.n	8002eaa <HAL_RCC_GetSysClockFreq+0x3a>
 8002ea2:	e0db      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ea4:	4b73      	ldr	r3, [pc, #460]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002ea8:	e0db      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eaa:	4b73      	ldr	r3, [pc, #460]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x208>)
 8002eac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eae:	e0d8      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb0:	4b6f      	ldr	r3, [pc, #444]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eb8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eba:	4b6d      	ldr	r3, [pc, #436]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d063      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec6:	4b6a      	ldr	r3, [pc, #424]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	099b      	lsrs	r3, r3, #6
 8002ecc:	2200      	movs	r2, #0
 8002ece:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ed0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eda:	2300      	movs	r3, #0
 8002edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ede:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ee2:	4622      	mov	r2, r4
 8002ee4:	462b      	mov	r3, r5
 8002ee6:	f04f 0000 	mov.w	r0, #0
 8002eea:	f04f 0100 	mov.w	r1, #0
 8002eee:	0159      	lsls	r1, r3, #5
 8002ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef4:	0150      	lsls	r0, r2, #5
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4621      	mov	r1, r4
 8002efc:	1a51      	subs	r1, r2, r1
 8002efe:	6139      	str	r1, [r7, #16]
 8002f00:	4629      	mov	r1, r5
 8002f02:	eb63 0301 	sbc.w	r3, r3, r1
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f14:	4659      	mov	r1, fp
 8002f16:	018b      	lsls	r3, r1, #6
 8002f18:	4651      	mov	r1, sl
 8002f1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f1e:	4651      	mov	r1, sl
 8002f20:	018a      	lsls	r2, r1, #6
 8002f22:	4651      	mov	r1, sl
 8002f24:	ebb2 0801 	subs.w	r8, r2, r1
 8002f28:	4659      	mov	r1, fp
 8002f2a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f42:	4690      	mov	r8, r2
 8002f44:	4699      	mov	r9, r3
 8002f46:	4623      	mov	r3, r4
 8002f48:	eb18 0303 	adds.w	r3, r8, r3
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	462b      	mov	r3, r5
 8002f50:	eb49 0303 	adc.w	r3, r9, r3
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f62:	4629      	mov	r1, r5
 8002f64:	024b      	lsls	r3, r1, #9
 8002f66:	4621      	mov	r1, r4
 8002f68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	024a      	lsls	r2, r1, #9
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f76:	2200      	movs	r2, #0
 8002f78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f80:	f7fd f922 	bl	80001c8 <__aeabi_uldivmod>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4613      	mov	r3, r2
 8002f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f8c:	e058      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8e:	4b38      	ldr	r3, [pc, #224]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	099b      	lsrs	r3, r3, #6
 8002f94:	2200      	movs	r2, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	4611      	mov	r1, r2
 8002f9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f9e:	623b      	str	r3, [r7, #32]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fa8:	4642      	mov	r2, r8
 8002faa:	464b      	mov	r3, r9
 8002fac:	f04f 0000 	mov.w	r0, #0
 8002fb0:	f04f 0100 	mov.w	r1, #0
 8002fb4:	0159      	lsls	r1, r3, #5
 8002fb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fba:	0150      	lsls	r0, r2, #5
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4641      	mov	r1, r8
 8002fc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fe0:	ebb2 040a 	subs.w	r4, r2, sl
 8002fe4:	eb63 050b 	sbc.w	r5, r3, fp
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	00eb      	lsls	r3, r5, #3
 8002ff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ff6:	00e2      	lsls	r2, r4, #3
 8002ff8:	4614      	mov	r4, r2
 8002ffa:	461d      	mov	r5, r3
 8002ffc:	4643      	mov	r3, r8
 8002ffe:	18e3      	adds	r3, r4, r3
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	464b      	mov	r3, r9
 8003004:	eb45 0303 	adc.w	r3, r5, r3
 8003008:	607b      	str	r3, [r7, #4]
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003016:	4629      	mov	r1, r5
 8003018:	028b      	lsls	r3, r1, #10
 800301a:	4621      	mov	r1, r4
 800301c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003020:	4621      	mov	r1, r4
 8003022:	028a      	lsls	r2, r1, #10
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800302a:	2200      	movs	r2, #0
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	61fa      	str	r2, [r7, #28]
 8003030:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003034:	f7fd f8c8 	bl	80001c8 <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4613      	mov	r3, r2
 800303e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003040:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	0c1b      	lsrs	r3, r3, #16
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	3301      	adds	r3, #1
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003050:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003052:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003054:	fbb2 f3f3 	udiv	r3, r2, r3
 8003058:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800305a:	e002      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800305c:	4b05      	ldr	r3, [pc, #20]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x204>)
 800305e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003064:	4618      	mov	r0, r3
 8003066:	3750      	adds	r7, #80	@ 0x50
 8003068:	46bd      	mov	sp, r7
 800306a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
 8003074:	00f42400 	.word	0x00f42400
 8003078:	007a1200 	.word	0x007a1200

0800307c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003080:	4b03      	ldr	r3, [pc, #12]	@ (8003090 <HAL_RCC_GetHCLKFreq+0x14>)
 8003082:	681b      	ldr	r3, [r3, #0]
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	20000010 	.word	0x20000010

08003094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003098:	f7ff fff0 	bl	800307c <HAL_RCC_GetHCLKFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	0a9b      	lsrs	r3, r3, #10
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	4903      	ldr	r1, [pc, #12]	@ (80030b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40023800 	.word	0x40023800
 80030b8:	08004d38 	.word	0x08004d38

080030bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030c0:	f7ff ffdc 	bl	800307c <HAL_RCC_GetHCLKFreq>
 80030c4:	4602      	mov	r2, r0
 80030c6:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	0b5b      	lsrs	r3, r3, #13
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	4903      	ldr	r1, [pc, #12]	@ (80030e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030d2:	5ccb      	ldrb	r3, [r1, r3]
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d8:	4618      	mov	r0, r3
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40023800 	.word	0x40023800
 80030e0:	08004d38 	.word	0x08004d38

080030e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e041      	b.n	800317a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fe fcd8 	bl	8001ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3304      	adds	r3, #4
 8003120:	4619      	mov	r1, r3
 8003122:	4610      	mov	r0, r2
 8003124:	f000 f8f4 	bl	8003310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_TIM_ConfigClockSource+0x1c>
 800319a:	2302      	movs	r3, #2
 800319c:	e0b4      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x186>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2202      	movs	r2, #2
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80031bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031c4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031d6:	d03e      	beq.n	8003256 <HAL_TIM_ConfigClockSource+0xd4>
 80031d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031dc:	f200 8087 	bhi.w	80032ee <HAL_TIM_ConfigClockSource+0x16c>
 80031e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031e4:	f000 8086 	beq.w	80032f4 <HAL_TIM_ConfigClockSource+0x172>
 80031e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ec:	d87f      	bhi.n	80032ee <HAL_TIM_ConfigClockSource+0x16c>
 80031ee:	2b70      	cmp	r3, #112	@ 0x70
 80031f0:	d01a      	beq.n	8003228 <HAL_TIM_ConfigClockSource+0xa6>
 80031f2:	2b70      	cmp	r3, #112	@ 0x70
 80031f4:	d87b      	bhi.n	80032ee <HAL_TIM_ConfigClockSource+0x16c>
 80031f6:	2b60      	cmp	r3, #96	@ 0x60
 80031f8:	d050      	beq.n	800329c <HAL_TIM_ConfigClockSource+0x11a>
 80031fa:	2b60      	cmp	r3, #96	@ 0x60
 80031fc:	d877      	bhi.n	80032ee <HAL_TIM_ConfigClockSource+0x16c>
 80031fe:	2b50      	cmp	r3, #80	@ 0x50
 8003200:	d03c      	beq.n	800327c <HAL_TIM_ConfigClockSource+0xfa>
 8003202:	2b50      	cmp	r3, #80	@ 0x50
 8003204:	d873      	bhi.n	80032ee <HAL_TIM_ConfigClockSource+0x16c>
 8003206:	2b40      	cmp	r3, #64	@ 0x40
 8003208:	d058      	beq.n	80032bc <HAL_TIM_ConfigClockSource+0x13a>
 800320a:	2b40      	cmp	r3, #64	@ 0x40
 800320c:	d86f      	bhi.n	80032ee <HAL_TIM_ConfigClockSource+0x16c>
 800320e:	2b30      	cmp	r3, #48	@ 0x30
 8003210:	d064      	beq.n	80032dc <HAL_TIM_ConfigClockSource+0x15a>
 8003212:	2b30      	cmp	r3, #48	@ 0x30
 8003214:	d86b      	bhi.n	80032ee <HAL_TIM_ConfigClockSource+0x16c>
 8003216:	2b20      	cmp	r3, #32
 8003218:	d060      	beq.n	80032dc <HAL_TIM_ConfigClockSource+0x15a>
 800321a:	2b20      	cmp	r3, #32
 800321c:	d867      	bhi.n	80032ee <HAL_TIM_ConfigClockSource+0x16c>
 800321e:	2b00      	cmp	r3, #0
 8003220:	d05c      	beq.n	80032dc <HAL_TIM_ConfigClockSource+0x15a>
 8003222:	2b10      	cmp	r3, #16
 8003224:	d05a      	beq.n	80032dc <HAL_TIM_ConfigClockSource+0x15a>
 8003226:	e062      	b.n	80032ee <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003238:	f000 f990 	bl	800355c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800324a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	609a      	str	r2, [r3, #8]
      break;
 8003254:	e04f      	b.n	80032f6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003266:	f000 f979 	bl	800355c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003278:	609a      	str	r2, [r3, #8]
      break;
 800327a:	e03c      	b.n	80032f6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003288:	461a      	mov	r2, r3
 800328a:	f000 f8ed 	bl	8003468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2150      	movs	r1, #80	@ 0x50
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f946 	bl	8003526 <TIM_ITRx_SetConfig>
      break;
 800329a:	e02c      	b.n	80032f6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032a8:	461a      	mov	r2, r3
 80032aa:	f000 f90c 	bl	80034c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2160      	movs	r1, #96	@ 0x60
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 f936 	bl	8003526 <TIM_ITRx_SetConfig>
      break;
 80032ba:	e01c      	b.n	80032f6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032c8:	461a      	mov	r2, r3
 80032ca:	f000 f8cd 	bl	8003468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2140      	movs	r1, #64	@ 0x40
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 f926 	bl	8003526 <TIM_ITRx_SetConfig>
      break;
 80032da:	e00c      	b.n	80032f6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4619      	mov	r1, r3
 80032e6:	4610      	mov	r0, r2
 80032e8:	f000 f91d 	bl	8003526 <TIM_ITRx_SetConfig>
      break;
 80032ec:	e003      	b.n	80032f6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	73fb      	strb	r3, [r7, #15]
      break;
 80032f2:	e000      	b.n	80032f6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003306:	7bfb      	ldrb	r3, [r7, #15]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a46      	ldr	r2, [pc, #280]	@ (800343c <TIM_Base_SetConfig+0x12c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d013      	beq.n	8003350 <TIM_Base_SetConfig+0x40>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800332e:	d00f      	beq.n	8003350 <TIM_Base_SetConfig+0x40>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a43      	ldr	r2, [pc, #268]	@ (8003440 <TIM_Base_SetConfig+0x130>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00b      	beq.n	8003350 <TIM_Base_SetConfig+0x40>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a42      	ldr	r2, [pc, #264]	@ (8003444 <TIM_Base_SetConfig+0x134>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d007      	beq.n	8003350 <TIM_Base_SetConfig+0x40>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a41      	ldr	r2, [pc, #260]	@ (8003448 <TIM_Base_SetConfig+0x138>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d003      	beq.n	8003350 <TIM_Base_SetConfig+0x40>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a40      	ldr	r2, [pc, #256]	@ (800344c <TIM_Base_SetConfig+0x13c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d108      	bne.n	8003362 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a35      	ldr	r2, [pc, #212]	@ (800343c <TIM_Base_SetConfig+0x12c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d02b      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003370:	d027      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a32      	ldr	r2, [pc, #200]	@ (8003440 <TIM_Base_SetConfig+0x130>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d023      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a31      	ldr	r2, [pc, #196]	@ (8003444 <TIM_Base_SetConfig+0x134>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d01f      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a30      	ldr	r2, [pc, #192]	@ (8003448 <TIM_Base_SetConfig+0x138>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d01b      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a2f      	ldr	r2, [pc, #188]	@ (800344c <TIM_Base_SetConfig+0x13c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d017      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a2e      	ldr	r2, [pc, #184]	@ (8003450 <TIM_Base_SetConfig+0x140>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a2d      	ldr	r2, [pc, #180]	@ (8003454 <TIM_Base_SetConfig+0x144>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00f      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003458 <TIM_Base_SetConfig+0x148>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00b      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a2b      	ldr	r2, [pc, #172]	@ (800345c <TIM_Base_SetConfig+0x14c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d007      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003460 <TIM_Base_SetConfig+0x150>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d003      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a29      	ldr	r2, [pc, #164]	@ (8003464 <TIM_Base_SetConfig+0x154>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d108      	bne.n	80033d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a10      	ldr	r2, [pc, #64]	@ (800343c <TIM_Base_SetConfig+0x12c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d003      	beq.n	8003408 <TIM_Base_SetConfig+0xf8>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a12      	ldr	r2, [pc, #72]	@ (800344c <TIM_Base_SetConfig+0x13c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d103      	bne.n	8003410 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b01      	cmp	r3, #1
 8003420:	d105      	bne.n	800342e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f023 0201 	bic.w	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	611a      	str	r2, [r3, #16]
  }
}
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40010000 	.word	0x40010000
 8003440:	40000400 	.word	0x40000400
 8003444:	40000800 	.word	0x40000800
 8003448:	40000c00 	.word	0x40000c00
 800344c:	40010400 	.word	0x40010400
 8003450:	40014000 	.word	0x40014000
 8003454:	40014400 	.word	0x40014400
 8003458:	40014800 	.word	0x40014800
 800345c:	40001800 	.word	0x40001800
 8003460:	40001c00 	.word	0x40001c00
 8003464:	40002000 	.word	0x40002000

08003468 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003468:	b480      	push	{r7}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	f023 0201 	bic.w	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f023 030a 	bic.w	r3, r3, #10
 80034a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	621a      	str	r2, [r3, #32]
}
 80034ba:	bf00      	nop
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b087      	sub	sp, #28
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	f023 0210 	bic.w	r2, r3, #16
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	031b      	lsls	r3, r3, #12
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003502:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	621a      	str	r2, [r3, #32]
}
 800351a:	bf00      	nop
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003526:	b480      	push	{r7}
 8003528:	b085      	sub	sp, #20
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800353c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	f043 0307 	orr.w	r3, r3, #7
 8003548:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	609a      	str	r2, [r3, #8]
}
 8003550:	bf00      	nop
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003576:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	021a      	lsls	r2, r3, #8
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	431a      	orrs	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4313      	orrs	r3, r2
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	609a      	str	r2, [r3, #8]
}
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e05a      	b.n	800366a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a21      	ldr	r2, [pc, #132]	@ (8003678 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d022      	beq.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003600:	d01d      	beq.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1d      	ldr	r2, [pc, #116]	@ (800367c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d018      	beq.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1b      	ldr	r2, [pc, #108]	@ (8003680 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1a      	ldr	r2, [pc, #104]	@ (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00e      	beq.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a18      	ldr	r2, [pc, #96]	@ (8003688 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d009      	beq.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a17      	ldr	r2, [pc, #92]	@ (800368c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d004      	beq.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a15      	ldr	r2, [pc, #84]	@ (8003690 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d10c      	bne.n	8003658 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003644:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	4313      	orrs	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40010000 	.word	0x40010000
 800367c:	40000400 	.word	0x40000400
 8003680:	40000800 	.word	0x40000800
 8003684:	40000c00 	.word	0x40000c00
 8003688:	40010400 	.word	0x40010400
 800368c:	40014000 	.word	0x40014000
 8003690:	40001800 	.word	0x40001800

08003694 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e042      	b.n	800372c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fe fa9e 	bl	8001bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2224      	movs	r2, #36	@ 0x24
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fe55 	bl	8004388 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800370c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08a      	sub	sp, #40	@ 0x28
 8003738:	af02      	add	r7, sp, #8
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b20      	cmp	r3, #32
 8003752:	d175      	bne.n	8003840 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <HAL_UART_Transmit+0x2c>
 800375a:	88fb      	ldrh	r3, [r7, #6]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e06e      	b.n	8003842 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2221      	movs	r2, #33	@ 0x21
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003772:	f7fe fbfb 	bl	8001f6c <HAL_GetTick>
 8003776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	88fa      	ldrh	r2, [r7, #6]
 800377c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	88fa      	ldrh	r2, [r7, #6]
 8003782:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800378c:	d108      	bne.n	80037a0 <HAL_UART_Transmit+0x6c>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d104      	bne.n	80037a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003796:	2300      	movs	r3, #0
 8003798:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	e003      	b.n	80037a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037a8:	e02e      	b.n	8003808 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2200      	movs	r2, #0
 80037b2:	2180      	movs	r1, #128	@ 0x80
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 fbb7 	bl	8003f28 <UART_WaitOnFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e03a      	b.n	8003842 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10b      	bne.n	80037ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	3302      	adds	r3, #2
 80037e6:	61bb      	str	r3, [r7, #24]
 80037e8:	e007      	b.n	80037fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	781a      	ldrb	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	3301      	adds	r3, #1
 80037f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1cb      	bne.n	80037aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2200      	movs	r2, #0
 800381a:	2140      	movs	r1, #64	@ 0x40
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fb83 	bl	8003f28 <UART_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e006      	b.n	8003842 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800383c:	2300      	movs	r3, #0
 800383e:	e000      	b.n	8003842 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003840:	2302      	movs	r3, #2
  }
}
 8003842:	4618      	mov	r0, r3
 8003844:	3720      	adds	r7, #32
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b08a      	sub	sp, #40	@ 0x28
 800384e:	af02      	add	r7, sp, #8
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	603b      	str	r3, [r7, #0]
 8003856:	4613      	mov	r3, r2
 8003858:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b20      	cmp	r3, #32
 8003868:	f040 8081 	bne.w	800396e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <HAL_UART_Receive+0x2e>
 8003872:	88fb      	ldrh	r3, [r7, #6]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e079      	b.n	8003970 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2222      	movs	r2, #34	@ 0x22
 8003886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003890:	f7fe fb6c 	bl	8001f6c <HAL_GetTick>
 8003894:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	88fa      	ldrh	r2, [r7, #6]
 800389a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	88fa      	ldrh	r2, [r7, #6]
 80038a0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038aa:	d108      	bne.n	80038be <HAL_UART_Receive+0x74>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d104      	bne.n	80038be <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	e003      	b.n	80038c6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80038c6:	e047      	b.n	8003958 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2200      	movs	r2, #0
 80038d0:	2120      	movs	r1, #32
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 fb28 	bl	8003f28 <UART_WaitOnFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d005      	beq.n	80038ea <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e042      	b.n	8003970 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10c      	bne.n	800390a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	3302      	adds	r3, #2
 8003906:	61bb      	str	r3, [r7, #24]
 8003908:	e01f      	b.n	800394a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003912:	d007      	beq.n	8003924 <HAL_UART_Receive+0xda>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10a      	bne.n	8003932 <HAL_UART_Receive+0xe8>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d106      	bne.n	8003932 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	b2da      	uxtb	r2, r3
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	701a      	strb	r2, [r3, #0]
 8003930:	e008      	b.n	8003944 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800393e:	b2da      	uxtb	r2, r3
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	3301      	adds	r3, #1
 8003948:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1b2      	bne.n	80038c8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	e000      	b.n	8003970 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800396e:	2302      	movs	r3, #2
  }
}
 8003970:	4618      	mov	r0, r3
 8003972:	3720      	adds	r7, #32
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	4613      	mov	r3, r2
 8003984:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b20      	cmp	r3, #32
 8003990:	d112      	bne.n	80039b8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_UART_Receive_IT+0x26>
 8003998:	88fb      	ldrh	r3, [r7, #6]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e00b      	b.n	80039ba <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80039a8:	88fb      	ldrh	r3, [r7, #6]
 80039aa:	461a      	mov	r2, r3
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 fb13 	bl	8003fda <UART_Start_Receive_IT>
 80039b4:	4603      	mov	r3, r0
 80039b6:	e000      	b.n	80039ba <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80039b8:	2302      	movs	r3, #2
  }
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b0ba      	sub	sp, #232	@ 0xe8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003a02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <HAL_UART_IRQHandler+0x66>
 8003a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fbf2 	bl	800420c <UART_Receive_IT>
      return;
 8003a28:	e25b      	b.n	8003ee2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 80de 	beq.w	8003bf0 <HAL_UART_IRQHandler+0x22c>
 8003a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d106      	bne.n	8003a4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a44:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80d1 	beq.w	8003bf0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00b      	beq.n	8003a72 <HAL_UART_IRQHandler+0xae>
 8003a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6a:	f043 0201 	orr.w	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00b      	beq.n	8003a96 <HAL_UART_IRQHandler+0xd2>
 8003a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8e:	f043 0202 	orr.w	r2, r3, #2
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <HAL_UART_IRQHandler+0xf6>
 8003aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab2:	f043 0204 	orr.w	r2, r3, #4
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d011      	beq.n	8003aea <HAL_UART_IRQHandler+0x126>
 8003ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d105      	bne.n	8003ade <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae2:	f043 0208 	orr.w	r2, r3, #8
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 81f2 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_UART_IRQHandler+0x14e>
 8003b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 fb7d 	bl	800420c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b1c:	2b40      	cmp	r3, #64	@ 0x40
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d103      	bne.n	8003b3e <HAL_UART_IRQHandler+0x17a>
 8003b36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d04f      	beq.n	8003bde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fa85 	bl	800404e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4e:	2b40      	cmp	r3, #64	@ 0x40
 8003b50:	d141      	bne.n	8003bd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3314      	adds	r3, #20
 8003b58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b60:	e853 3f00 	ldrex	r3, [r3]
 8003b64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3314      	adds	r3, #20
 8003b7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b8e:	e841 2300 	strex	r3, r2, [r1]
 8003b92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1d9      	bne.n	8003b52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d013      	beq.n	8003bce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003baa:	4a7e      	ldr	r2, [pc, #504]	@ (8003da4 <HAL_UART_IRQHandler+0x3e0>)
 8003bac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fe fb8b 	bl	80022ce <HAL_DMA_Abort_IT>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d016      	beq.n	8003bec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bc8:	4610      	mov	r0, r2
 8003bca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bcc:	e00e      	b.n	8003bec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f994 	bl	8003efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd4:	e00a      	b.n	8003bec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f990 	bl	8003efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bdc:	e006      	b.n	8003bec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f98c 	bl	8003efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003bea:	e175      	b.n	8003ed8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bec:	bf00      	nop
    return;
 8003bee:	e173      	b.n	8003ed8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	f040 814f 	bne.w	8003e98 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bfe:	f003 0310 	and.w	r3, r3, #16
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 8148 	beq.w	8003e98 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c0c:	f003 0310 	and.w	r3, r3, #16
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 8141 	beq.w	8003e98 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c36:	2b40      	cmp	r3, #64	@ 0x40
 8003c38:	f040 80b6 	bne.w	8003da8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8145 	beq.w	8003edc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	f080 813e 	bcs.w	8003edc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c66:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c72:	f000 8088 	beq.w	8003d86 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	330c      	adds	r3, #12
 8003c7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	330c      	adds	r3, #12
 8003c9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ca2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ca6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003cae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1d9      	bne.n	8003c76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3314      	adds	r3, #20
 8003cc8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ccc:	e853 3f00 	ldrex	r3, [r3]
 8003cd0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003cd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3314      	adds	r3, #20
 8003ce2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ce6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003cea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003cee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003cf2:	e841 2300 	strex	r3, r2, [r1]
 8003cf6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003cf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e1      	bne.n	8003cc2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3314      	adds	r3, #20
 8003d04:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3314      	adds	r3, #20
 8003d1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e3      	bne.n	8003cfe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	330c      	adds	r3, #12
 8003d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d4e:	e853 3f00 	ldrex	r3, [r3]
 8003d52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d56:	f023 0310 	bic.w	r3, r3, #16
 8003d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	330c      	adds	r3, #12
 8003d64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d68:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d6a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e3      	bne.n	8003d44 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fe fa34 	bl	80021ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f8b7 	bl	8003f10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003da2:	e09b      	b.n	8003edc <HAL_UART_IRQHandler+0x518>
 8003da4:	08004115 	.word	0x08004115
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 808e 	beq.w	8003ee0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003dc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 8089 	beq.w	8003ee0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003de4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	330c      	adds	r3, #12
 8003dee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003df2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003df4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003df8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e3      	bne.n	8003dce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3314      	adds	r3, #20
 8003e0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e10:	e853 3f00 	ldrex	r3, [r3]
 8003e14:	623b      	str	r3, [r7, #32]
   return(result);
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3314      	adds	r3, #20
 8003e26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e32:	e841 2300 	strex	r3, r2, [r1]
 8003e36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1e3      	bne.n	8003e06 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	330c      	adds	r3, #12
 8003e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0310 	bic.w	r3, r3, #16
 8003e62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e70:	61fa      	str	r2, [r7, #28]
 8003e72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	69b9      	ldr	r1, [r7, #24]
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	e841 2300 	strex	r3, r2, [r1]
 8003e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e3      	bne.n	8003e4c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e8e:	4619      	mov	r1, r3
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f83d 	bl	8003f10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e96:	e023      	b.n	8003ee0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d009      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x4f4>
 8003ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f943 	bl	800413c <UART_Transmit_IT>
    return;
 8003eb6:	e014      	b.n	8003ee2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00e      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x51e>
 8003ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d008      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f983 	bl	80041dc <UART_EndTransmit_IT>
    return;
 8003ed6:	e004      	b.n	8003ee2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003ed8:	bf00      	nop
 8003eda:	e002      	b.n	8003ee2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003edc:	bf00      	nop
 8003ede:	e000      	b.n	8003ee2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ee0:	bf00      	nop
  }
}
 8003ee2:	37e8      	adds	r7, #232	@ 0xe8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	4613      	mov	r3, r2
 8003f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f38:	e03b      	b.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f40:	d037      	beq.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f42:	f7fe f813 	bl	8001f6c <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	6a3a      	ldr	r2, [r7, #32]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d302      	bcc.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e03a      	b.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d023      	beq.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b80      	cmp	r3, #128	@ 0x80
 8003f6e:	d020      	beq.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b40      	cmp	r3, #64	@ 0x40
 8003f74:	d01d      	beq.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d116      	bne.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f857 	bl	800404e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2208      	movs	r2, #8
 8003fa4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e00f      	b.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	bf0c      	ite	eq
 8003fc2:	2301      	moveq	r3, #1
 8003fc4:	2300      	movne	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	461a      	mov	r2, r3
 8003fca:	79fb      	ldrb	r3, [r7, #7]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d0b4      	beq.n	8003f3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b085      	sub	sp, #20
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	88fa      	ldrh	r2, [r7, #6]
 8003ff2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	88fa      	ldrh	r2, [r7, #6]
 8003ff8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2222      	movs	r2, #34	@ 0x22
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d007      	beq.n	8004020 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800401e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695a      	ldr	r2, [r3, #20]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0220 	orr.w	r2, r2, #32
 800403e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800404e:	b480      	push	{r7}
 8004050:	b095      	sub	sp, #84	@ 0x54
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	330c      	adds	r3, #12
 800405c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004068:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800406c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	330c      	adds	r3, #12
 8004074:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004076:	643a      	str	r2, [r7, #64]	@ 0x40
 8004078:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800407c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e5      	bne.n	8004056 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3314      	adds	r3, #20
 8004090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	61fb      	str	r3, [r7, #28]
   return(result);
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	f023 0301 	bic.w	r3, r3, #1
 80040a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3314      	adds	r3, #20
 80040a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e5      	bne.n	800408a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d119      	bne.n	80040fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	330c      	adds	r3, #12
 80040cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f023 0310 	bic.w	r3, r3, #16
 80040dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	330c      	adds	r3, #12
 80040e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040e6:	61ba      	str	r2, [r7, #24]
 80040e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	6979      	ldr	r1, [r7, #20]
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	613b      	str	r3, [r7, #16]
   return(result);
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e5      	bne.n	80040c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004108:	bf00      	nop
 800410a:	3754      	adds	r7, #84	@ 0x54
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004120:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f7ff fee4 	bl	8003efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004134:	bf00      	nop
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b21      	cmp	r3, #33	@ 0x21
 800414e:	d13e      	bne.n	80041ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004158:	d114      	bne.n	8004184 <UART_Transmit_IT+0x48>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d110      	bne.n	8004184 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004176:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	1c9a      	adds	r2, r3, #2
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	621a      	str	r2, [r3, #32]
 8004182:	e008      	b.n	8004196 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	1c59      	adds	r1, r3, #1
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6211      	str	r1, [r2, #32]
 800418e:	781a      	ldrb	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29b      	uxth	r3, r3
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	4619      	mov	r1, r3
 80041a4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10f      	bne.n	80041ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e000      	b.n	80041d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041ce:	2302      	movs	r3, #2
  }
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7ff fe73 	bl	8003ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08c      	sub	sp, #48	@ 0x30
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b22      	cmp	r3, #34	@ 0x22
 800421e:	f040 80ae 	bne.w	800437e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800422a:	d117      	bne.n	800425c <UART_Receive_IT+0x50>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d113      	bne.n	800425c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004234:	2300      	movs	r3, #0
 8004236:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	b29b      	uxth	r3, r3
 8004246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424a:	b29a      	uxth	r2, r3
 800424c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004254:	1c9a      	adds	r2, r3, #2
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	629a      	str	r2, [r3, #40]	@ 0x28
 800425a:	e026      	b.n	80042aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004260:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004262:	2300      	movs	r3, #0
 8004264:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800426e:	d007      	beq.n	8004280 <UART_Receive_IT+0x74>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <UART_Receive_IT+0x82>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d106      	bne.n	800428e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	b2da      	uxtb	r2, r3
 8004288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	e008      	b.n	80042a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800429a:	b2da      	uxtb	r2, r3
 800429c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800429e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	4619      	mov	r1, r3
 80042b8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d15d      	bne.n	800437a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0220 	bic.w	r2, r2, #32
 80042cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695a      	ldr	r2, [r3, #20]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004300:	2b01      	cmp	r3, #1
 8004302:	d135      	bne.n	8004370 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	330c      	adds	r3, #12
 8004310:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	613b      	str	r3, [r7, #16]
   return(result);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f023 0310 	bic.w	r3, r3, #16
 8004320:	627b      	str	r3, [r7, #36]	@ 0x24
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	330c      	adds	r3, #12
 8004328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800432a:	623a      	str	r2, [r7, #32]
 800432c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432e:	69f9      	ldr	r1, [r7, #28]
 8004330:	6a3a      	ldr	r2, [r7, #32]
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	61bb      	str	r3, [r7, #24]
   return(result);
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1e5      	bne.n	800430a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b10      	cmp	r3, #16
 800434a:	d10a      	bne.n	8004362 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004366:	4619      	mov	r1, r3
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff fdd1 	bl	8003f10 <HAL_UARTEx_RxEventCallback>
 800436e:	e002      	b.n	8004376 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7fc f963 	bl	800063c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	e002      	b.n	8004380 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e000      	b.n	8004380 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800437e:	2302      	movs	r3, #2
  }
}
 8004380:	4618      	mov	r0, r3
 8004382:	3730      	adds	r7, #48	@ 0x30
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800438c:	b0c0      	sub	sp, #256	@ 0x100
 800438e:	af00      	add	r7, sp, #0
 8004390:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80043a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a4:	68d9      	ldr	r1, [r3, #12]
 80043a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	ea40 0301 	orr.w	r3, r0, r1
 80043b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	431a      	orrs	r2, r3
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80043e0:	f021 010c 	bic.w	r1, r1, #12
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80043ee:	430b      	orrs	r3, r1
 80043f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004402:	6999      	ldr	r1, [r3, #24]
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	ea40 0301 	orr.w	r3, r0, r1
 800440e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4b8f      	ldr	r3, [pc, #572]	@ (8004654 <UART_SetConfig+0x2cc>)
 8004418:	429a      	cmp	r2, r3
 800441a:	d005      	beq.n	8004428 <UART_SetConfig+0xa0>
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	4b8d      	ldr	r3, [pc, #564]	@ (8004658 <UART_SetConfig+0x2d0>)
 8004424:	429a      	cmp	r2, r3
 8004426:	d104      	bne.n	8004432 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004428:	f7fe fe48 	bl	80030bc <HAL_RCC_GetPCLK2Freq>
 800442c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004430:	e003      	b.n	800443a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004432:	f7fe fe2f 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 8004436:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800443a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004444:	f040 810c 	bne.w	8004660 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800444c:	2200      	movs	r2, #0
 800444e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004452:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004456:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800445a:	4622      	mov	r2, r4
 800445c:	462b      	mov	r3, r5
 800445e:	1891      	adds	r1, r2, r2
 8004460:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004462:	415b      	adcs	r3, r3
 8004464:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004466:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800446a:	4621      	mov	r1, r4
 800446c:	eb12 0801 	adds.w	r8, r2, r1
 8004470:	4629      	mov	r1, r5
 8004472:	eb43 0901 	adc.w	r9, r3, r1
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004482:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004486:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800448a:	4690      	mov	r8, r2
 800448c:	4699      	mov	r9, r3
 800448e:	4623      	mov	r3, r4
 8004490:	eb18 0303 	adds.w	r3, r8, r3
 8004494:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004498:	462b      	mov	r3, r5
 800449a:	eb49 0303 	adc.w	r3, r9, r3
 800449e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80044b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044b6:	460b      	mov	r3, r1
 80044b8:	18db      	adds	r3, r3, r3
 80044ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80044bc:	4613      	mov	r3, r2
 80044be:	eb42 0303 	adc.w	r3, r2, r3
 80044c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80044c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80044c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80044cc:	f7fb fe7c 	bl	80001c8 <__aeabi_uldivmod>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4b61      	ldr	r3, [pc, #388]	@ (800465c <UART_SetConfig+0x2d4>)
 80044d6:	fba3 2302 	umull	r2, r3, r3, r2
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	011c      	lsls	r4, r3, #4
 80044de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80044ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80044f0:	4642      	mov	r2, r8
 80044f2:	464b      	mov	r3, r9
 80044f4:	1891      	adds	r1, r2, r2
 80044f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80044f8:	415b      	adcs	r3, r3
 80044fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004500:	4641      	mov	r1, r8
 8004502:	eb12 0a01 	adds.w	sl, r2, r1
 8004506:	4649      	mov	r1, r9
 8004508:	eb43 0b01 	adc.w	fp, r3, r1
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004518:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800451c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004520:	4692      	mov	sl, r2
 8004522:	469b      	mov	fp, r3
 8004524:	4643      	mov	r3, r8
 8004526:	eb1a 0303 	adds.w	r3, sl, r3
 800452a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800452e:	464b      	mov	r3, r9
 8004530:	eb4b 0303 	adc.w	r3, fp, r3
 8004534:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004544:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004548:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800454c:	460b      	mov	r3, r1
 800454e:	18db      	adds	r3, r3, r3
 8004550:	643b      	str	r3, [r7, #64]	@ 0x40
 8004552:	4613      	mov	r3, r2
 8004554:	eb42 0303 	adc.w	r3, r2, r3
 8004558:	647b      	str	r3, [r7, #68]	@ 0x44
 800455a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800455e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004562:	f7fb fe31 	bl	80001c8 <__aeabi_uldivmod>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4611      	mov	r1, r2
 800456c:	4b3b      	ldr	r3, [pc, #236]	@ (800465c <UART_SetConfig+0x2d4>)
 800456e:	fba3 2301 	umull	r2, r3, r3, r1
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2264      	movs	r2, #100	@ 0x64
 8004576:	fb02 f303 	mul.w	r3, r2, r3
 800457a:	1acb      	subs	r3, r1, r3
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004582:	4b36      	ldr	r3, [pc, #216]	@ (800465c <UART_SetConfig+0x2d4>)
 8004584:	fba3 2302 	umull	r2, r3, r3, r2
 8004588:	095b      	lsrs	r3, r3, #5
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004590:	441c      	add	r4, r3
 8004592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004596:	2200      	movs	r2, #0
 8004598:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800459c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80045a4:	4642      	mov	r2, r8
 80045a6:	464b      	mov	r3, r9
 80045a8:	1891      	adds	r1, r2, r2
 80045aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045ac:	415b      	adcs	r3, r3
 80045ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80045b4:	4641      	mov	r1, r8
 80045b6:	1851      	adds	r1, r2, r1
 80045b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80045ba:	4649      	mov	r1, r9
 80045bc:	414b      	adcs	r3, r1
 80045be:	637b      	str	r3, [r7, #52]	@ 0x34
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80045cc:	4659      	mov	r1, fp
 80045ce:	00cb      	lsls	r3, r1, #3
 80045d0:	4651      	mov	r1, sl
 80045d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045d6:	4651      	mov	r1, sl
 80045d8:	00ca      	lsls	r2, r1, #3
 80045da:	4610      	mov	r0, r2
 80045dc:	4619      	mov	r1, r3
 80045de:	4603      	mov	r3, r0
 80045e0:	4642      	mov	r2, r8
 80045e2:	189b      	adds	r3, r3, r2
 80045e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045e8:	464b      	mov	r3, r9
 80045ea:	460a      	mov	r2, r1
 80045ec:	eb42 0303 	adc.w	r3, r2, r3
 80045f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004600:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004604:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004608:	460b      	mov	r3, r1
 800460a:	18db      	adds	r3, r3, r3
 800460c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800460e:	4613      	mov	r3, r2
 8004610:	eb42 0303 	adc.w	r3, r2, r3
 8004614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004616:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800461a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800461e:	f7fb fdd3 	bl	80001c8 <__aeabi_uldivmod>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4b0d      	ldr	r3, [pc, #52]	@ (800465c <UART_SetConfig+0x2d4>)
 8004628:	fba3 1302 	umull	r1, r3, r3, r2
 800462c:	095b      	lsrs	r3, r3, #5
 800462e:	2164      	movs	r1, #100	@ 0x64
 8004630:	fb01 f303 	mul.w	r3, r1, r3
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	3332      	adds	r3, #50	@ 0x32
 800463a:	4a08      	ldr	r2, [pc, #32]	@ (800465c <UART_SetConfig+0x2d4>)
 800463c:	fba2 2303 	umull	r2, r3, r2, r3
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	f003 0207 	and.w	r2, r3, #7
 8004646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4422      	add	r2, r4
 800464e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004650:	e106      	b.n	8004860 <UART_SetConfig+0x4d8>
 8004652:	bf00      	nop
 8004654:	40011000 	.word	0x40011000
 8004658:	40011400 	.word	0x40011400
 800465c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004664:	2200      	movs	r2, #0
 8004666:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800466a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800466e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004672:	4642      	mov	r2, r8
 8004674:	464b      	mov	r3, r9
 8004676:	1891      	adds	r1, r2, r2
 8004678:	6239      	str	r1, [r7, #32]
 800467a:	415b      	adcs	r3, r3
 800467c:	627b      	str	r3, [r7, #36]	@ 0x24
 800467e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004682:	4641      	mov	r1, r8
 8004684:	1854      	adds	r4, r2, r1
 8004686:	4649      	mov	r1, r9
 8004688:	eb43 0501 	adc.w	r5, r3, r1
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	00eb      	lsls	r3, r5, #3
 8004696:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800469a:	00e2      	lsls	r2, r4, #3
 800469c:	4614      	mov	r4, r2
 800469e:	461d      	mov	r5, r3
 80046a0:	4643      	mov	r3, r8
 80046a2:	18e3      	adds	r3, r4, r3
 80046a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046a8:	464b      	mov	r3, r9
 80046aa:	eb45 0303 	adc.w	r3, r5, r3
 80046ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	f04f 0300 	mov.w	r3, #0
 80046ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80046ce:	4629      	mov	r1, r5
 80046d0:	008b      	lsls	r3, r1, #2
 80046d2:	4621      	mov	r1, r4
 80046d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046d8:	4621      	mov	r1, r4
 80046da:	008a      	lsls	r2, r1, #2
 80046dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80046e0:	f7fb fd72 	bl	80001c8 <__aeabi_uldivmod>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4b60      	ldr	r3, [pc, #384]	@ (800486c <UART_SetConfig+0x4e4>)
 80046ea:	fba3 2302 	umull	r2, r3, r3, r2
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	011c      	lsls	r4, r3, #4
 80046f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046f6:	2200      	movs	r2, #0
 80046f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004700:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004704:	4642      	mov	r2, r8
 8004706:	464b      	mov	r3, r9
 8004708:	1891      	adds	r1, r2, r2
 800470a:	61b9      	str	r1, [r7, #24]
 800470c:	415b      	adcs	r3, r3
 800470e:	61fb      	str	r3, [r7, #28]
 8004710:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004714:	4641      	mov	r1, r8
 8004716:	1851      	adds	r1, r2, r1
 8004718:	6139      	str	r1, [r7, #16]
 800471a:	4649      	mov	r1, r9
 800471c:	414b      	adcs	r3, r1
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800472c:	4659      	mov	r1, fp
 800472e:	00cb      	lsls	r3, r1, #3
 8004730:	4651      	mov	r1, sl
 8004732:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004736:	4651      	mov	r1, sl
 8004738:	00ca      	lsls	r2, r1, #3
 800473a:	4610      	mov	r0, r2
 800473c:	4619      	mov	r1, r3
 800473e:	4603      	mov	r3, r0
 8004740:	4642      	mov	r2, r8
 8004742:	189b      	adds	r3, r3, r2
 8004744:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004748:	464b      	mov	r3, r9
 800474a:	460a      	mov	r2, r1
 800474c:	eb42 0303 	adc.w	r3, r2, r3
 8004750:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800475e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800476c:	4649      	mov	r1, r9
 800476e:	008b      	lsls	r3, r1, #2
 8004770:	4641      	mov	r1, r8
 8004772:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004776:	4641      	mov	r1, r8
 8004778:	008a      	lsls	r2, r1, #2
 800477a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800477e:	f7fb fd23 	bl	80001c8 <__aeabi_uldivmod>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4611      	mov	r1, r2
 8004788:	4b38      	ldr	r3, [pc, #224]	@ (800486c <UART_SetConfig+0x4e4>)
 800478a:	fba3 2301 	umull	r2, r3, r3, r1
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	2264      	movs	r2, #100	@ 0x64
 8004792:	fb02 f303 	mul.w	r3, r2, r3
 8004796:	1acb      	subs	r3, r1, r3
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	3332      	adds	r3, #50	@ 0x32
 800479c:	4a33      	ldr	r2, [pc, #204]	@ (800486c <UART_SetConfig+0x4e4>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047a8:	441c      	add	r4, r3
 80047aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047ae:	2200      	movs	r2, #0
 80047b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80047b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80047b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80047b8:	4642      	mov	r2, r8
 80047ba:	464b      	mov	r3, r9
 80047bc:	1891      	adds	r1, r2, r2
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	415b      	adcs	r3, r3
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047c8:	4641      	mov	r1, r8
 80047ca:	1851      	adds	r1, r2, r1
 80047cc:	6039      	str	r1, [r7, #0]
 80047ce:	4649      	mov	r1, r9
 80047d0:	414b      	adcs	r3, r1
 80047d2:	607b      	str	r3, [r7, #4]
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047e0:	4659      	mov	r1, fp
 80047e2:	00cb      	lsls	r3, r1, #3
 80047e4:	4651      	mov	r1, sl
 80047e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ea:	4651      	mov	r1, sl
 80047ec:	00ca      	lsls	r2, r1, #3
 80047ee:	4610      	mov	r0, r2
 80047f0:	4619      	mov	r1, r3
 80047f2:	4603      	mov	r3, r0
 80047f4:	4642      	mov	r2, r8
 80047f6:	189b      	adds	r3, r3, r2
 80047f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047fa:	464b      	mov	r3, r9
 80047fc:	460a      	mov	r2, r1
 80047fe:	eb42 0303 	adc.w	r3, r2, r3
 8004802:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	663b      	str	r3, [r7, #96]	@ 0x60
 800480e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800481c:	4649      	mov	r1, r9
 800481e:	008b      	lsls	r3, r1, #2
 8004820:	4641      	mov	r1, r8
 8004822:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004826:	4641      	mov	r1, r8
 8004828:	008a      	lsls	r2, r1, #2
 800482a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800482e:	f7fb fccb 	bl	80001c8 <__aeabi_uldivmod>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4b0d      	ldr	r3, [pc, #52]	@ (800486c <UART_SetConfig+0x4e4>)
 8004838:	fba3 1302 	umull	r1, r3, r3, r2
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	2164      	movs	r1, #100	@ 0x64
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	3332      	adds	r3, #50	@ 0x32
 800484a:	4a08      	ldr	r2, [pc, #32]	@ (800486c <UART_SetConfig+0x4e4>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	f003 020f 	and.w	r2, r3, #15
 8004856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4422      	add	r2, r4
 800485e:	609a      	str	r2, [r3, #8]
}
 8004860:	bf00      	nop
 8004862:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004866:	46bd      	mov	sp, r7
 8004868:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800486c:	51eb851f 	.word	0x51eb851f

08004870 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004870:	b084      	sub	sp, #16
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	f107 001c 	add.w	r0, r7, #28
 800487e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004882:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004886:	2b01      	cmp	r3, #1
 8004888:	d123      	bne.n	80048d2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800489e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80048b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d105      	bne.n	80048c6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f901 	bl	8004ace <USB_CoreReset>
 80048cc:	4603      	mov	r3, r0
 80048ce:	73fb      	strb	r3, [r7, #15]
 80048d0:	e01b      	b.n	800490a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f8f5 	bl	8004ace <USB_CoreReset>
 80048e4:	4603      	mov	r3, r0
 80048e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80048e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d106      	bne.n	80048fe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80048fc:	e005      	b.n	800490a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004902:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800490a:	7fbb      	ldrb	r3, [r7, #30]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d10b      	bne.n	8004928 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f043 0206 	orr.w	r2, r3, #6
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f043 0220 	orr.w	r2, r3, #32
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004928:	7bfb      	ldrb	r3, [r7, #15]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004934:	b004      	add	sp, #16
 8004936:	4770      	bx	lr

08004938 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f023 0201 	bic.w	r2, r3, #1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b084      	sub	sp, #16
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	460b      	mov	r3, r1
 8004964:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004976:	78fb      	ldrb	r3, [r7, #3]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d115      	bne.n	80049a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004988:	200a      	movs	r0, #10
 800498a:	f7fd fafb 	bl	8001f84 <HAL_Delay>
      ms += 10U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	330a      	adds	r3, #10
 8004992:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f88c 	bl	8004ab2 <USB_GetMode>
 800499a:	4603      	mov	r3, r0
 800499c:	2b01      	cmp	r3, #1
 800499e:	d01e      	beq.n	80049de <USB_SetCurrentMode+0x84>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80049a4:	d9f0      	bls.n	8004988 <USB_SetCurrentMode+0x2e>
 80049a6:	e01a      	b.n	80049de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d115      	bne.n	80049da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80049ba:	200a      	movs	r0, #10
 80049bc:	f7fd fae2 	bl	8001f84 <HAL_Delay>
      ms += 10U;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	330a      	adds	r3, #10
 80049c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f873 	bl	8004ab2 <USB_GetMode>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <USB_SetCurrentMode+0x84>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80049d6:	d9f0      	bls.n	80049ba <USB_SetCurrentMode+0x60>
 80049d8:	e001      	b.n	80049de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e005      	b.n	80049ea <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2bc8      	cmp	r3, #200	@ 0xc8
 80049e2:	d101      	bne.n	80049e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e000      	b.n	80049ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b085      	sub	sp, #20
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3301      	adds	r3, #1
 8004a04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a0c:	d901      	bls.n	8004a12 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e01b      	b.n	8004a4a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	daf2      	bge.n	8004a00 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	019b      	lsls	r3, r3, #6
 8004a22:	f043 0220 	orr.w	r2, r3, #32
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a36:	d901      	bls.n	8004a3c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e006      	b.n	8004a4a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f003 0320 	and.w	r3, r3, #32
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d0f0      	beq.n	8004a2a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b085      	sub	sp, #20
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	3301      	adds	r3, #1
 8004a66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a6e:	d901      	bls.n	8004a74 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e018      	b.n	8004aa6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	daf2      	bge.n	8004a62 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2210      	movs	r2, #16
 8004a84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a92:	d901      	bls.n	8004a98 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e006      	b.n	8004aa6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f003 0310 	and.w	r3, r3, #16
 8004aa0:	2b10      	cmp	r3, #16
 8004aa2:	d0f0      	beq.n	8004a86 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	f003 0301 	and.w	r3, r3, #1
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3301      	adds	r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ae6:	d901      	bls.n	8004aec <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e01b      	b.n	8004b24 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	daf2      	bge.n	8004ada <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f043 0201 	orr.w	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3301      	adds	r3, #1
 8004b08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b10:	d901      	bls.n	8004b16 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e006      	b.n	8004b24 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d0f0      	beq.n	8004b04 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b30:	b084      	sub	sp, #16
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b086      	sub	sp, #24
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004b3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b50:	461a      	mov	r2, r3
 8004b52:	2300      	movs	r3, #0
 8004b54:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b66:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b72:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d119      	bne.n	8004bba <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004b86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d10a      	bne.n	8004ba4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004b9c:	f043 0304 	orr.w	r3, r3, #4
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	e014      	b.n	8004bce <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004bb2:	f023 0304 	bic.w	r3, r3, #4
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	e009      	b.n	8004bce <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004bc8:	f023 0304 	bic.w	r3, r3, #4
 8004bcc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bce:	2110      	movs	r1, #16
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff ff0e 	bl	80049f2 <USB_FlushTxFifo>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff ff38 	bl	8004a56 <USB_FlushRxFifo>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	e015      	b.n	8004c22 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c02:	461a      	mov	r2, r3
 8004c04:	f04f 33ff 	mov.w	r3, #4294967295
 8004c08:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c16:	461a      	mov	r2, r3
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004c26:	461a      	mov	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d3e3      	bcc.n	8004bf6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f04f 32ff 	mov.w	r2, #4294967295
 8004c3a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a18      	ldr	r2, [pc, #96]	@ (8004ca0 <USB_HostInit+0x170>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d10b      	bne.n	8004c5c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c4a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a15      	ldr	r2, [pc, #84]	@ (8004ca4 <USB_HostInit+0x174>)
 8004c50:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a14      	ldr	r2, [pc, #80]	@ (8004ca8 <USB_HostInit+0x178>)
 8004c56:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8004c5a:	e009      	b.n	8004c70 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2280      	movs	r2, #128	@ 0x80
 8004c60:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a11      	ldr	r2, [pc, #68]	@ (8004cac <USB_HostInit+0x17c>)
 8004c66:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a11      	ldr	r2, [pc, #68]	@ (8004cb0 <USB_HostInit+0x180>)
 8004c6c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d105      	bne.n	8004c84 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	f043 0210 	orr.w	r2, r3, #16
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699a      	ldr	r2, [r3, #24]
 8004c88:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb4 <USB_HostInit+0x184>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c9c:	b004      	add	sp, #16
 8004c9e:	4770      	bx	lr
 8004ca0:	40040000 	.word	0x40040000
 8004ca4:	01000200 	.word	0x01000200
 8004ca8:	00e00300 	.word	0x00e00300
 8004cac:	00600080 	.word	0x00600080
 8004cb0:	004000e0 	.word	0x004000e0
 8004cb4:	a3200008 	.word	0xa3200008

08004cb8 <memset>:
 8004cb8:	4402      	add	r2, r0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d100      	bne.n	8004cc2 <memset+0xa>
 8004cc0:	4770      	bx	lr
 8004cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc6:	e7f9      	b.n	8004cbc <memset+0x4>

08004cc8 <__libc_init_array>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	4d0d      	ldr	r5, [pc, #52]	@ (8004d00 <__libc_init_array+0x38>)
 8004ccc:	4c0d      	ldr	r4, [pc, #52]	@ (8004d04 <__libc_init_array+0x3c>)
 8004cce:	1b64      	subs	r4, r4, r5
 8004cd0:	10a4      	asrs	r4, r4, #2
 8004cd2:	2600      	movs	r6, #0
 8004cd4:	42a6      	cmp	r6, r4
 8004cd6:	d109      	bne.n	8004cec <__libc_init_array+0x24>
 8004cd8:	4d0b      	ldr	r5, [pc, #44]	@ (8004d08 <__libc_init_array+0x40>)
 8004cda:	4c0c      	ldr	r4, [pc, #48]	@ (8004d0c <__libc_init_array+0x44>)
 8004cdc:	f000 f818 	bl	8004d10 <_init>
 8004ce0:	1b64      	subs	r4, r4, r5
 8004ce2:	10a4      	asrs	r4, r4, #2
 8004ce4:	2600      	movs	r6, #0
 8004ce6:	42a6      	cmp	r6, r4
 8004ce8:	d105      	bne.n	8004cf6 <__libc_init_array+0x2e>
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf0:	4798      	blx	r3
 8004cf2:	3601      	adds	r6, #1
 8004cf4:	e7ee      	b.n	8004cd4 <__libc_init_array+0xc>
 8004cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfa:	4798      	blx	r3
 8004cfc:	3601      	adds	r6, #1
 8004cfe:	e7f2      	b.n	8004ce6 <__libc_init_array+0x1e>
 8004d00:	08004d48 	.word	0x08004d48
 8004d04:	08004d48 	.word	0x08004d48
 8004d08:	08004d48 	.word	0x08004d48
 8004d0c:	08004d4c 	.word	0x08004d4c

08004d10 <_init>:
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d12:	bf00      	nop
 8004d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d16:	bc08      	pop	{r3}
 8004d18:	469e      	mov	lr, r3
 8004d1a:	4770      	bx	lr

08004d1c <_fini>:
 8004d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1e:	bf00      	nop
 8004d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d22:	bc08      	pop	{r3}
 8004d24:	469e      	mov	lr, r3
 8004d26:	4770      	bx	lr
